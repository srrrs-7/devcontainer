{
  "permissions": {
    "allow": [
      "Read",
      "Glob",
      "Grep",
      "Bash(cat *)",
      "Bash(ls *)",
      "Bash(pwd)",
      "Bash(which *)",
      "Bash(echo *)",
      "Bash(head *)",
      "Bash(tail *)",
      "Bash(wc *)",
      "Bash(grep *)",
      "Bash(find *)",
      "Bash(tree *)",
      "Bash(date)",
      "Bash(hostname)",
      "Bash(whoami)",
      "Bash(env)",
      "Bash(printenv)",
      "Bash(bun run *)",
      "Bash(bun test *)",
      "Bash(bun test:* *)",
      "Bash(bun check *)",
      "Bash(bun check:* *)",
      "Bash(bun build:* *)",
      "Bash(bun dev:* *)",
      "Bash(bun start:* *)",
      "Bash(bun --version)",
      "Bash(bun --help)",
      "Bash(bunx prisma studio)",
      "Bash(bunx prisma format)",
      "Bash(bunx prisma validate)",
      "Bash(node --version)",
      "Bash(git status *)",
      "Bash(git diff *)",
      "Bash(git log *)",
      "Bash(git show *)",
      "Bash(git branch *)",
      "Bash(git remote -v)",
      "Bash(git config --list)",
      "Bash(git worktree list)",
      "Bash(docker ps *)",
      "Bash(docker logs *)",
      "Bash(docker compose ps *)",
      "Bash(docker compose logs *)",
      "Bash(docker inspect *)",
      "Bash(docker version)",
      "Bash(make wt-l)",
      "Bash(*/.claude/skills/notice/script.sh *)"
    ],
    "deny": [
      "Bash(rm -rf /)",
      "Bash(rm -rf /*)",
      "Bash(rm -rf ~)",
      "Bash(rm -rf ~/*)",
      "Bash(rm -rf /workspace)",
      "Bash(rm -rf /workspace/*)",
      "Bash(sudo *)",
      "Bash(su *)",
      "Bash(chmod 777 *)",
      "Bash(chmod -R 777 *)",
      "Bash(chown root *)",
      "Bash(chown -R root *)",
      "Bash(mv /etc/* *)",
      "Bash(mv /usr/* *)",
      "Bash(mv /bin/* *)",
      "Bash(mv /sbin/* *)",
      "Bash(cp /etc/passwd *)",
      "Bash(cp /etc/shadow *)",
      "Bash(cp /etc/sudoers *)",
      "Bash(cat /etc/passwd)",
      "Bash(cat /etc/shadow)",
      "Bash(cat /etc/sudoers)",
      "Bash(cat ~/.ssh/id_rsa)",
      "Bash(cat ~/.ssh/id_ed25519)",
      "Bash(cat ~/.aws/credentials)",
      "Bash(git push --force *main*)",
      "Bash(git push --force *master*)",
      "Bash(git push -f *main*)",
      "Bash(git push -f *master*)",
      "Bash(git push --force-with-lease *main*)",
      "Bash(git push --force-with-lease *master*)",
      "Bash(git reset --hard origin/*)",
      "Bash(git clean -fd *)",
      "Bash(git clean -fdx *)",
      "Bash(git branch -D main)",
      "Bash(git branch -D master)",
      "Bash(docker stop *)",
      "Bash(docker kill *)",
      "Bash(docker rm *)",
      "Bash(docker rmi *)",
      "Bash(docker system prune *)",
      "Bash(docker volume rm *)",
      "Bash(docker volume prune *)",
      "Bash(docker network rm *)",
      "Bash(docker network prune *)",
      "Bash(npm *)",
      "Bash(yarn *)",
      "Bash(pnpm *)",
      "Bash(npx *)",
      "Bash(curl * | sh)",
      "Bash(curl * | bash)",
      "Bash(curl * | zsh)",
      "Bash(wget * | sh)",
      "Bash(wget * | bash)",
      "Bash(wget * | zsh)",
      "Bash(curl -X POST *)",
      "Bash(curl -X PUT *)",
      "Bash(curl -X DELETE *)",
      "Bash(curl -X PATCH *)",
      "Bash(wget -O *)",
      "Bash(nc *)",
      "Bash(netcat *)",
      "Bash(ncat *)",
      "Bash(ssh *)",
      "Bash(scp *)",
      "Bash(rsync *)",
      "Bash(sftp *)",
      "Bash(ftp *)",
      "Bash(telnet *)",
      "Bash(eval *)",
      "Bash(exec *)",
      "Bash(source /dev/*)",
      "Bash(dd if=*)",
      "Bash(dd of=*)",
      "Bash(mkfs.*)",
      "Bash(fdisk *)",
      "Bash(parted *)",
      "Bash(gdisk *)",
      "Bash(kill -9 1)",
      "Bash(killall *)",
      "Bash(pkill *)",
      "Bash(systemctl stop *)",
      "Bash(systemctl disable *)",
      "Bash(systemctl mask *)",
      "Bash(service * stop)",
      "Bash(service * disable)",
      "Bash(reboot)",
      "Bash(shutdown *)",
      "Bash(poweroff)",
      "Bash(halt)",
      "Bash(init 0)",
      "Bash(init 6)",
      "Bash(rm -rf node_modules)",
      "Bash(rm -rf .git)",
      "Bash(rm -rf .git/*)",
      "Bash(rm -rf src)",
      "Bash(rm -rf src/*)",
      "Bash(rm -rf apps)",
      "Bash(rm -rf apps/*)",
      "Bash(rm -rf packages)",
      "Bash(rm -rf packages/*)",
      "Bash(rm package.json)",
      "Bash(rm bun.lockb)",
      "Bash(rm tsconfig.json)",
      "Bash(rm -rf *.ts)",
      "Bash(rm -rf *.tsx)",
      "Bash(rm -rf *.js)",
      "Bash(rm -rf *.jsx)",
      "Bash(echo * > .env*)",
      "Bash(cat * > .env*)",
      "Bash(* >> .env*)",
      "Bash(* > .git/*)",
      "Bash(* > .ssh/*)",
      "Bash(* > .aws/*)",
      "Bash(*;*;*)",
      "Bash(*&&*&&*&&*)",
      "Bash(*||*||*||*)",
      "Bash(* 2>&1 | nc *)",
      "Bash(/dev/tcp/*)",
      "Bash(/dev/udp/*)",
      "Bash(export PATH=*)",
      "Bash(export LD_PRELOAD=*)",
      "Bash(export LD_LIBRARY_PATH=*)",
      "Bash(unset PATH)",
      "Bash(crontab *)",
      "Bash(at *)",
      "Bash(iptables *)",
      "Bash(ufw *)",
      "Bash(firewall-cmd *)",
      "Bash(nftables *)",
      "Bash(echo * | base64 -d | *)",
      "Bash(base64 -d * | sh)",
      "Bash(base64 -d * | bash)",
      "Bash(python -c *os.system*)",
      "Bash(python -c *subprocess*)",
      "Bash(perl -e *system*)",
      "Bash(perl -e *exec*)",
      "Bash(ruby -e *system*)",
      "Bash(ruby -e *exec*)",
      "Bash(awk * system(*)",
      "Bash(sed -e *e*)",
      "Bash(find * -exec *)",
      "Bash(find * -delete)",
      "Bash(xargs rm *)",
      "Bash(xargs chmod *)",
      "Bash(chmod +x /tmp/*)",
      "Bash(chmod 777 /tmp/*)",
      "Bash(bunx prisma migrate reset *)",
      "Bash(bunx prisma db push --force-reset *)",
      "Bash(bun add *malicious*)",
      "Bash(bun add *backdoor*)",
      "Bash(bun add *crypto-miner*)"
    ],
    "ask": [
      "Edit",
      "Write",
      "NotebookEdit",
      "Bash(git add *)",
      "Bash(git commit *)",
      "Bash(git push *)",
      "Bash(git pull *)",
      "Bash(git fetch *)",
      "Bash(git merge *)",
      "Bash(git rebase *)",
      "Bash(git checkout *)",
      "Bash(git switch *)",
      "Bash(git cherry-pick *)",
      "Bash(git reset *)",
      "Bash(git revert *)",
      "Bash(git stash *)",
      "Bash(git stash drop *)",
      "Bash(git tag *)",
      "Bash(git tag -d *)",
      "Bash(git remote add *)",
      "Bash(git remote remove *)",
      "Bash(git worktree add ../wt_* *)",
      "Bash(git worktree remove *)",
      "Bash(git worktree prune)",
      "Bash(bun install *)",
      "Bash(bun add *)",
      "Bash(bun remove *)",
      "Bash(bun update *)",
      "Bash(bun upgrade *)",
      "Bash(bunx prisma generate)",
      "Bash(bunx prisma migrate dev *)",
      "Bash(bunx prisma migrate deploy)",
      "Bash(bunx prisma db push *)",
      "Bash(bunx prisma db seed)",
      "Bash(bunx prisma db execute *)",
      "Bash(docker compose up *)",
      "Bash(docker compose down *)",
      "Bash(docker compose restart *)",
      "Bash(docker compose build *)",
      "Bash(docker start *)",
      "Bash(docker restart *)",
      "Bash(docker exec *)",
      "Bash(make wt)",
      "Bash(make wt-d)",
      "Bash(make cp)",
      "Bash(rm */*)",
      "Bash(rm -r */*)",
      "Bash(rm -rf */dist/*)",
      "Bash(rm -rf */build/*)",
      "Bash(rm -rf */coverage/*)",
      "Bash(mv */* *)",
      "Bash(cp -r */* *)",
      "Bash(chmod *)",
      "Bash(chown *)",
      "Bash(sed -i *)",
      "Bash(awk * > *)",
      "Bash(* > */*)",
      "Bash(gh auth login *)",
      "Bash(gh auth logout)",
      "Bash(gh pr create *)",
      "Bash(gh pr edit *)",
      "Bash(gh pr merge *)",
      "Bash(gh pr close *)",
      "Bash(gh issue create *)",
      "Bash(gh issue edit *)",
      "Bash(gh issue close *)",
      "Bash(gh release create *)",
      "Bash(gh release delete *)",
      "Bash(gh repo delete *)",
      "Bash(gh repo archive *)",
      "Bash(curl -X GET *)",
      "Bash(curl --request GET *)",
      "Bash(wget *)"
    ]
  }
}
