
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Application` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Application
 * 
 */
export type ApplicationModel = runtime.Types.Result.DefaultSelection<Prisma.$ApplicationPayload>

export type AggregateApplication = {
  _count: ApplicationCountAggregateOutputType | null
  _min: ApplicationMinAggregateOutputType | null
  _max: ApplicationMaxAggregateOutputType | null
}

export type ApplicationMinAggregateOutputType = {
  applicationId: string | null
  userId: string | null
  type: $Enums.ApplicationType | null
  description: string | null
  applicationDate: Date | null
  updatedAt: Date | null
}

export type ApplicationMaxAggregateOutputType = {
  applicationId: string | null
  userId: string | null
  type: $Enums.ApplicationType | null
  description: string | null
  applicationDate: Date | null
  updatedAt: Date | null
}

export type ApplicationCountAggregateOutputType = {
  applicationId: number
  userId: number
  type: number
  description: number
  applicationDate: number
  updatedAt: number
  _all: number
}


export type ApplicationMinAggregateInputType = {
  applicationId?: true
  userId?: true
  type?: true
  description?: true
  applicationDate?: true
  updatedAt?: true
}

export type ApplicationMaxAggregateInputType = {
  applicationId?: true
  userId?: true
  type?: true
  description?: true
  applicationDate?: true
  updatedAt?: true
}

export type ApplicationCountAggregateInputType = {
  applicationId?: true
  userId?: true
  type?: true
  description?: true
  applicationDate?: true
  updatedAt?: true
  _all?: true
}

export type ApplicationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Application to aggregate.
   */
  where?: Prisma.ApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Applications to fetch.
   */
  orderBy?: Prisma.ApplicationOrderByWithRelationInput | Prisma.ApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Applications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Applications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Applications
  **/
  _count?: true | ApplicationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ApplicationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ApplicationMaxAggregateInputType
}

export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
      [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateApplication[P]>
    : Prisma.GetScalarType<T[P], AggregateApplication[P]>
}




export type ApplicationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ApplicationWhereInput
  orderBy?: Prisma.ApplicationOrderByWithAggregationInput | Prisma.ApplicationOrderByWithAggregationInput[]
  by: Prisma.ApplicationScalarFieldEnum[] | Prisma.ApplicationScalarFieldEnum
  having?: Prisma.ApplicationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ApplicationCountAggregateInputType | true
  _min?: ApplicationMinAggregateInputType
  _max?: ApplicationMaxAggregateInputType
}

export type ApplicationGroupByOutputType = {
  applicationId: string
  userId: string
  type: $Enums.ApplicationType
  description: string
  applicationDate: Date
  updatedAt: Date
  _count: ApplicationCountAggregateOutputType | null
  _min: ApplicationMinAggregateOutputType | null
  _max: ApplicationMaxAggregateOutputType | null
}

type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ApplicationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ApplicationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ApplicationGroupByOutputType[P]>
      }
    >
  >



export type ApplicationWhereInput = {
  AND?: Prisma.ApplicationWhereInput | Prisma.ApplicationWhereInput[]
  OR?: Prisma.ApplicationWhereInput[]
  NOT?: Prisma.ApplicationWhereInput | Prisma.ApplicationWhereInput[]
  applicationId?: Prisma.UuidFilter<"Application"> | string
  userId?: Prisma.UuidFilter<"Application"> | string
  type?: Prisma.EnumApplicationTypeFilter<"Application"> | $Enums.ApplicationType
  description?: Prisma.StringFilter<"Application"> | string
  applicationDate?: Prisma.DateTimeFilter<"Application"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Application"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  histories?: Prisma.ApplicationHistoryListRelationFilter
}

export type ApplicationOrderByWithRelationInput = {
  applicationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  applicationDate?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  histories?: Prisma.ApplicationHistoryOrderByRelationAggregateInput
}

export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
  applicationId?: string
  AND?: Prisma.ApplicationWhereInput | Prisma.ApplicationWhereInput[]
  OR?: Prisma.ApplicationWhereInput[]
  NOT?: Prisma.ApplicationWhereInput | Prisma.ApplicationWhereInput[]
  userId?: Prisma.UuidFilter<"Application"> | string
  type?: Prisma.EnumApplicationTypeFilter<"Application"> | $Enums.ApplicationType
  description?: Prisma.StringFilter<"Application"> | string
  applicationDate?: Prisma.DateTimeFilter<"Application"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Application"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  histories?: Prisma.ApplicationHistoryListRelationFilter
}, "applicationId">

export type ApplicationOrderByWithAggregationInput = {
  applicationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  applicationDate?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ApplicationCountOrderByAggregateInput
  _max?: Prisma.ApplicationMaxOrderByAggregateInput
  _min?: Prisma.ApplicationMinOrderByAggregateInput
}

export type ApplicationScalarWhereWithAggregatesInput = {
  AND?: Prisma.ApplicationScalarWhereWithAggregatesInput | Prisma.ApplicationScalarWhereWithAggregatesInput[]
  OR?: Prisma.ApplicationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ApplicationScalarWhereWithAggregatesInput | Prisma.ApplicationScalarWhereWithAggregatesInput[]
  applicationId?: Prisma.UuidWithAggregatesFilter<"Application"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"Application"> | string
  type?: Prisma.EnumApplicationTypeWithAggregatesFilter<"Application"> | $Enums.ApplicationType
  description?: Prisma.StringWithAggregatesFilter<"Application"> | string
  applicationDate?: Prisma.DateTimeWithAggregatesFilter<"Application"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Application"> | Date | string
}

export type ApplicationCreateInput = {
  applicationId?: string
  type: $Enums.ApplicationType
  description: string
  applicationDate?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutApplicationsInput
  histories?: Prisma.ApplicationHistoryCreateNestedManyWithoutApplicationInput
}

export type ApplicationUncheckedCreateInput = {
  applicationId?: string
  userId: string
  type: $Enums.ApplicationType
  description: string
  applicationDate?: Date | string
  updatedAt?: Date | string
  histories?: Prisma.ApplicationHistoryUncheckedCreateNestedManyWithoutApplicationInput
}

export type ApplicationUpdateInput = {
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumApplicationTypeFieldUpdateOperationsInput | $Enums.ApplicationType
  description?: Prisma.StringFieldUpdateOperationsInput | string
  applicationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutApplicationsNestedInput
  histories?: Prisma.ApplicationHistoryUpdateManyWithoutApplicationNestedInput
}

export type ApplicationUncheckedUpdateInput = {
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumApplicationTypeFieldUpdateOperationsInput | $Enums.ApplicationType
  description?: Prisma.StringFieldUpdateOperationsInput | string
  applicationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  histories?: Prisma.ApplicationHistoryUncheckedUpdateManyWithoutApplicationNestedInput
}

export type ApplicationCreateManyInput = {
  applicationId?: string
  userId: string
  type: $Enums.ApplicationType
  description: string
  applicationDate?: Date | string
  updatedAt?: Date | string
}

export type ApplicationUpdateManyMutationInput = {
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumApplicationTypeFieldUpdateOperationsInput | $Enums.ApplicationType
  description?: Prisma.StringFieldUpdateOperationsInput | string
  applicationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicationUncheckedUpdateManyInput = {
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumApplicationTypeFieldUpdateOperationsInput | $Enums.ApplicationType
  description?: Prisma.StringFieldUpdateOperationsInput | string
  applicationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicationListRelationFilter = {
  every?: Prisma.ApplicationWhereInput
  some?: Prisma.ApplicationWhereInput
  none?: Prisma.ApplicationWhereInput
}

export type ApplicationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ApplicationCountOrderByAggregateInput = {
  applicationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  applicationDate?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ApplicationMaxOrderByAggregateInput = {
  applicationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  applicationDate?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ApplicationMinOrderByAggregateInput = {
  applicationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  applicationDate?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ApplicationScalarRelationFilter = {
  is?: Prisma.ApplicationWhereInput
  isNot?: Prisma.ApplicationWhereInput
}

export type ApplicationCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ApplicationCreateWithoutUserInput, Prisma.ApplicationUncheckedCreateWithoutUserInput> | Prisma.ApplicationCreateWithoutUserInput[] | Prisma.ApplicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ApplicationCreateOrConnectWithoutUserInput | Prisma.ApplicationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ApplicationCreateManyUserInputEnvelope
  connect?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
}

export type ApplicationUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ApplicationCreateWithoutUserInput, Prisma.ApplicationUncheckedCreateWithoutUserInput> | Prisma.ApplicationCreateWithoutUserInput[] | Prisma.ApplicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ApplicationCreateOrConnectWithoutUserInput | Prisma.ApplicationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ApplicationCreateManyUserInputEnvelope
  connect?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
}

export type ApplicationUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicationCreateWithoutUserInput, Prisma.ApplicationUncheckedCreateWithoutUserInput> | Prisma.ApplicationCreateWithoutUserInput[] | Prisma.ApplicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ApplicationCreateOrConnectWithoutUserInput | Prisma.ApplicationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ApplicationUpsertWithWhereUniqueWithoutUserInput | Prisma.ApplicationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ApplicationCreateManyUserInputEnvelope
  set?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
  disconnect?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
  delete?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
  connect?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
  update?: Prisma.ApplicationUpdateWithWhereUniqueWithoutUserInput | Prisma.ApplicationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ApplicationUpdateManyWithWhereWithoutUserInput | Prisma.ApplicationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ApplicationScalarWhereInput | Prisma.ApplicationScalarWhereInput[]
}

export type ApplicationUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicationCreateWithoutUserInput, Prisma.ApplicationUncheckedCreateWithoutUserInput> | Prisma.ApplicationCreateWithoutUserInput[] | Prisma.ApplicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ApplicationCreateOrConnectWithoutUserInput | Prisma.ApplicationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ApplicationUpsertWithWhereUniqueWithoutUserInput | Prisma.ApplicationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ApplicationCreateManyUserInputEnvelope
  set?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
  disconnect?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
  delete?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
  connect?: Prisma.ApplicationWhereUniqueInput | Prisma.ApplicationWhereUniqueInput[]
  update?: Prisma.ApplicationUpdateWithWhereUniqueWithoutUserInput | Prisma.ApplicationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ApplicationUpdateManyWithWhereWithoutUserInput | Prisma.ApplicationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ApplicationScalarWhereInput | Prisma.ApplicationScalarWhereInput[]
}

export type EnumApplicationTypeFieldUpdateOperationsInput = {
  set?: $Enums.ApplicationType
}

export type ApplicationCreateNestedOneWithoutHistoriesInput = {
  create?: Prisma.XOR<Prisma.ApplicationCreateWithoutHistoriesInput, Prisma.ApplicationUncheckedCreateWithoutHistoriesInput>
  connectOrCreate?: Prisma.ApplicationCreateOrConnectWithoutHistoriesInput
  connect?: Prisma.ApplicationWhereUniqueInput
}

export type ApplicationUpdateOneRequiredWithoutHistoriesNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicationCreateWithoutHistoriesInput, Prisma.ApplicationUncheckedCreateWithoutHistoriesInput>
  connectOrCreate?: Prisma.ApplicationCreateOrConnectWithoutHistoriesInput
  upsert?: Prisma.ApplicationUpsertWithoutHistoriesInput
  connect?: Prisma.ApplicationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ApplicationUpdateToOneWithWhereWithoutHistoriesInput, Prisma.ApplicationUpdateWithoutHistoriesInput>, Prisma.ApplicationUncheckedUpdateWithoutHistoriesInput>
}

export type ApplicationCreateWithoutUserInput = {
  applicationId?: string
  type: $Enums.ApplicationType
  description: string
  applicationDate?: Date | string
  updatedAt?: Date | string
  histories?: Prisma.ApplicationHistoryCreateNestedManyWithoutApplicationInput
}

export type ApplicationUncheckedCreateWithoutUserInput = {
  applicationId?: string
  type: $Enums.ApplicationType
  description: string
  applicationDate?: Date | string
  updatedAt?: Date | string
  histories?: Prisma.ApplicationHistoryUncheckedCreateNestedManyWithoutApplicationInput
}

export type ApplicationCreateOrConnectWithoutUserInput = {
  where: Prisma.ApplicationWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicationCreateWithoutUserInput, Prisma.ApplicationUncheckedCreateWithoutUserInput>
}

export type ApplicationCreateManyUserInputEnvelope = {
  data: Prisma.ApplicationCreateManyUserInput | Prisma.ApplicationCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ApplicationUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ApplicationWhereUniqueInput
  update: Prisma.XOR<Prisma.ApplicationUpdateWithoutUserInput, Prisma.ApplicationUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ApplicationCreateWithoutUserInput, Prisma.ApplicationUncheckedCreateWithoutUserInput>
}

export type ApplicationUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ApplicationWhereUniqueInput
  data: Prisma.XOR<Prisma.ApplicationUpdateWithoutUserInput, Prisma.ApplicationUncheckedUpdateWithoutUserInput>
}

export type ApplicationUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ApplicationScalarWhereInput
  data: Prisma.XOR<Prisma.ApplicationUpdateManyMutationInput, Prisma.ApplicationUncheckedUpdateManyWithoutUserInput>
}

export type ApplicationScalarWhereInput = {
  AND?: Prisma.ApplicationScalarWhereInput | Prisma.ApplicationScalarWhereInput[]
  OR?: Prisma.ApplicationScalarWhereInput[]
  NOT?: Prisma.ApplicationScalarWhereInput | Prisma.ApplicationScalarWhereInput[]
  applicationId?: Prisma.UuidFilter<"Application"> | string
  userId?: Prisma.UuidFilter<"Application"> | string
  type?: Prisma.EnumApplicationTypeFilter<"Application"> | $Enums.ApplicationType
  description?: Prisma.StringFilter<"Application"> | string
  applicationDate?: Prisma.DateTimeFilter<"Application"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Application"> | Date | string
}

export type ApplicationCreateWithoutHistoriesInput = {
  applicationId?: string
  type: $Enums.ApplicationType
  description: string
  applicationDate?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutApplicationsInput
}

export type ApplicationUncheckedCreateWithoutHistoriesInput = {
  applicationId?: string
  userId: string
  type: $Enums.ApplicationType
  description: string
  applicationDate?: Date | string
  updatedAt?: Date | string
}

export type ApplicationCreateOrConnectWithoutHistoriesInput = {
  where: Prisma.ApplicationWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicationCreateWithoutHistoriesInput, Prisma.ApplicationUncheckedCreateWithoutHistoriesInput>
}

export type ApplicationUpsertWithoutHistoriesInput = {
  update: Prisma.XOR<Prisma.ApplicationUpdateWithoutHistoriesInput, Prisma.ApplicationUncheckedUpdateWithoutHistoriesInput>
  create: Prisma.XOR<Prisma.ApplicationCreateWithoutHistoriesInput, Prisma.ApplicationUncheckedCreateWithoutHistoriesInput>
  where?: Prisma.ApplicationWhereInput
}

export type ApplicationUpdateToOneWithWhereWithoutHistoriesInput = {
  where?: Prisma.ApplicationWhereInput
  data: Prisma.XOR<Prisma.ApplicationUpdateWithoutHistoriesInput, Prisma.ApplicationUncheckedUpdateWithoutHistoriesInput>
}

export type ApplicationUpdateWithoutHistoriesInput = {
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumApplicationTypeFieldUpdateOperationsInput | $Enums.ApplicationType
  description?: Prisma.StringFieldUpdateOperationsInput | string
  applicationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutApplicationsNestedInput
}

export type ApplicationUncheckedUpdateWithoutHistoriesInput = {
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumApplicationTypeFieldUpdateOperationsInput | $Enums.ApplicationType
  description?: Prisma.StringFieldUpdateOperationsInput | string
  applicationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicationCreateManyUserInput = {
  applicationId?: string
  type: $Enums.ApplicationType
  description: string
  applicationDate?: Date | string
  updatedAt?: Date | string
}

export type ApplicationUpdateWithoutUserInput = {
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumApplicationTypeFieldUpdateOperationsInput | $Enums.ApplicationType
  description?: Prisma.StringFieldUpdateOperationsInput | string
  applicationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  histories?: Prisma.ApplicationHistoryUpdateManyWithoutApplicationNestedInput
}

export type ApplicationUncheckedUpdateWithoutUserInput = {
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumApplicationTypeFieldUpdateOperationsInput | $Enums.ApplicationType
  description?: Prisma.StringFieldUpdateOperationsInput | string
  applicationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  histories?: Prisma.ApplicationHistoryUncheckedUpdateManyWithoutApplicationNestedInput
}

export type ApplicationUncheckedUpdateManyWithoutUserInput = {
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumApplicationTypeFieldUpdateOperationsInput | $Enums.ApplicationType
  description?: Prisma.StringFieldUpdateOperationsInput | string
  applicationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ApplicationCountOutputType
 */

export type ApplicationCountOutputType = {
  histories: number
}

export type ApplicationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  histories?: boolean | ApplicationCountOutputTypeCountHistoriesArgs
}

/**
 * ApplicationCountOutputType without action
 */
export type ApplicationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationCountOutputType
   */
  select?: Prisma.ApplicationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ApplicationCountOutputType without action
 */
export type ApplicationCountOutputTypeCountHistoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ApplicationHistoryWhereInput
}


export type ApplicationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  applicationId?: boolean
  userId?: boolean
  type?: boolean
  description?: boolean
  applicationDate?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  histories?: boolean | Prisma.Application$historiesArgs<ExtArgs>
  _count?: boolean | Prisma.ApplicationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["application"]>

export type ApplicationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  applicationId?: boolean
  userId?: boolean
  type?: boolean
  description?: boolean
  applicationDate?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["application"]>

export type ApplicationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  applicationId?: boolean
  userId?: boolean
  type?: boolean
  description?: boolean
  applicationDate?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["application"]>

export type ApplicationSelectScalar = {
  applicationId?: boolean
  userId?: boolean
  type?: boolean
  description?: boolean
  applicationDate?: boolean
  updatedAt?: boolean
}

export type ApplicationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"applicationId" | "userId" | "type" | "description" | "applicationDate" | "updatedAt", ExtArgs["result"]["application"]>
export type ApplicationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  histories?: boolean | Prisma.Application$historiesArgs<ExtArgs>
  _count?: boolean | Prisma.ApplicationCountOutputTypeDefaultArgs<ExtArgs>
}
export type ApplicationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ApplicationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ApplicationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Application"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    histories: Prisma.$ApplicationHistoryPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    applicationId: string
    userId: string
    type: $Enums.ApplicationType
    description: string
    applicationDate: Date
    updatedAt: Date
  }, ExtArgs["result"]["application"]>
  composites: {}
}

export type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ApplicationPayload, S>

export type ApplicationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ApplicationCountAggregateInputType | true
  }

export interface ApplicationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
  /**
   * Find zero or one Application that matches the filter.
   * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
   * @example
   * // Get one Application
   * const application = await prisma.application.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ApplicationFindUniqueArgs>(args: Prisma.SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ApplicationClient<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Application that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
   * @example
   * // Get one Application
   * const application = await prisma.application.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApplicationClient<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Application that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
   * @example
   * // Get one Application
   * const application = await prisma.application.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ApplicationFindFirstArgs>(args?: Prisma.SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>): Prisma.Prisma__ApplicationClient<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Application that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
   * @example
   * // Get one Application
   * const application = await prisma.application.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApplicationClient<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Applications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Applications
   * const applications = await prisma.application.findMany()
   * 
   * // Get first 10 Applications
   * const applications = await prisma.application.findMany({ take: 10 })
   * 
   * // Only select the `applicationId`
   * const applicationWithApplicationIdOnly = await prisma.application.findMany({ select: { applicationId: true } })
   * 
   */
  findMany<T extends ApplicationFindManyArgs>(args?: Prisma.SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Application.
   * @param {ApplicationCreateArgs} args - Arguments to create a Application.
   * @example
   * // Create one Application
   * const Application = await prisma.application.create({
   *   data: {
   *     // ... data to create a Application
   *   }
   * })
   * 
   */
  create<T extends ApplicationCreateArgs>(args: Prisma.SelectSubset<T, ApplicationCreateArgs<ExtArgs>>): Prisma.Prisma__ApplicationClient<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Applications.
   * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
   * @example
   * // Create many Applications
   * const application = await prisma.application.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ApplicationCreateManyArgs>(args?: Prisma.SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Applications and returns the data saved in the database.
   * @param {ApplicationCreateManyAndReturnArgs} args - Arguments to create many Applications.
   * @example
   * // Create many Applications
   * const application = await prisma.application.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Applications and only return the `applicationId`
   * const applicationWithApplicationIdOnly = await prisma.application.createManyAndReturn({
   *   select: { applicationId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ApplicationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Application.
   * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
   * @example
   * // Delete one Application
   * const Application = await prisma.application.delete({
   *   where: {
   *     // ... filter to delete one Application
   *   }
   * })
   * 
   */
  delete<T extends ApplicationDeleteArgs>(args: Prisma.SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>): Prisma.Prisma__ApplicationClient<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Application.
   * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
   * @example
   * // Update one Application
   * const application = await prisma.application.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ApplicationUpdateArgs>(args: Prisma.SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>): Prisma.Prisma__ApplicationClient<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Applications.
   * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
   * @example
   * // Delete a few Applications
   * const { count } = await prisma.application.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ApplicationDeleteManyArgs>(args?: Prisma.SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Applications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Applications
   * const application = await prisma.application.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ApplicationUpdateManyArgs>(args: Prisma.SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Applications and returns the data updated in the database.
   * @param {ApplicationUpdateManyAndReturnArgs} args - Arguments to update many Applications.
   * @example
   * // Update many Applications
   * const application = await prisma.application.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Applications and only return the `applicationId`
   * const applicationWithApplicationIdOnly = await prisma.application.updateManyAndReturn({
   *   select: { applicationId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ApplicationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Application.
   * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
   * @example
   * // Update or create a Application
   * const application = await prisma.application.upsert({
   *   create: {
   *     // ... data to create a Application
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Application we want to update
   *   }
   * })
   */
  upsert<T extends ApplicationUpsertArgs>(args: Prisma.SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>): Prisma.Prisma__ApplicationClient<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Applications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
   * @example
   * // Count the number of Applications
   * const count = await prisma.application.count({
   *   where: {
   *     // ... the filter for the Applications we want to count
   *   }
   * })
  **/
  count<T extends ApplicationCountArgs>(
    args?: Prisma.Subset<T, ApplicationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ApplicationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Application.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ApplicationAggregateArgs>(args: Prisma.Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

  /**
   * Group by Application.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ApplicationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ApplicationGroupByArgs['orderBy'] }
      : { orderBy?: ApplicationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Application model
 */
readonly fields: ApplicationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Application.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  histories<T extends Prisma.Application$historiesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Application$historiesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Application model
 */
export interface ApplicationFieldRefs {
  readonly applicationId: Prisma.FieldRef<"Application", 'String'>
  readonly userId: Prisma.FieldRef<"Application", 'String'>
  readonly type: Prisma.FieldRef<"Application", 'ApplicationType'>
  readonly description: Prisma.FieldRef<"Application", 'String'>
  readonly applicationDate: Prisma.FieldRef<"Application", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Application", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Application findUnique
 */
export type ApplicationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  /**
   * Filter, which Application to fetch.
   */
  where: Prisma.ApplicationWhereUniqueInput
}

/**
 * Application findUniqueOrThrow
 */
export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  /**
   * Filter, which Application to fetch.
   */
  where: Prisma.ApplicationWhereUniqueInput
}

/**
 * Application findFirst
 */
export type ApplicationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  /**
   * Filter, which Application to fetch.
   */
  where?: Prisma.ApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Applications to fetch.
   */
  orderBy?: Prisma.ApplicationOrderByWithRelationInput | Prisma.ApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Applications.
   */
  cursor?: Prisma.ApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Applications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Applications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Applications.
   */
  distinct?: Prisma.ApplicationScalarFieldEnum | Prisma.ApplicationScalarFieldEnum[]
}

/**
 * Application findFirstOrThrow
 */
export type ApplicationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  /**
   * Filter, which Application to fetch.
   */
  where?: Prisma.ApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Applications to fetch.
   */
  orderBy?: Prisma.ApplicationOrderByWithRelationInput | Prisma.ApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Applications.
   */
  cursor?: Prisma.ApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Applications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Applications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Applications.
   */
  distinct?: Prisma.ApplicationScalarFieldEnum | Prisma.ApplicationScalarFieldEnum[]
}

/**
 * Application findMany
 */
export type ApplicationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  /**
   * Filter, which Applications to fetch.
   */
  where?: Prisma.ApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Applications to fetch.
   */
  orderBy?: Prisma.ApplicationOrderByWithRelationInput | Prisma.ApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Applications.
   */
  cursor?: Prisma.ApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Applications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Applications.
   */
  skip?: number
  distinct?: Prisma.ApplicationScalarFieldEnum | Prisma.ApplicationScalarFieldEnum[]
}

/**
 * Application create
 */
export type ApplicationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  /**
   * The data needed to create a Application.
   */
  data: Prisma.XOR<Prisma.ApplicationCreateInput, Prisma.ApplicationUncheckedCreateInput>
}

/**
 * Application createMany
 */
export type ApplicationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Applications.
   */
  data: Prisma.ApplicationCreateManyInput | Prisma.ApplicationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Application createManyAndReturn
 */
export type ApplicationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * The data used to create many Applications.
   */
  data: Prisma.ApplicationCreateManyInput | Prisma.ApplicationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Application update
 */
export type ApplicationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  /**
   * The data needed to update a Application.
   */
  data: Prisma.XOR<Prisma.ApplicationUpdateInput, Prisma.ApplicationUncheckedUpdateInput>
  /**
   * Choose, which Application to update.
   */
  where: Prisma.ApplicationWhereUniqueInput
}

/**
 * Application updateMany
 */
export type ApplicationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Applications.
   */
  data: Prisma.XOR<Prisma.ApplicationUpdateManyMutationInput, Prisma.ApplicationUncheckedUpdateManyInput>
  /**
   * Filter which Applications to update
   */
  where?: Prisma.ApplicationWhereInput
  /**
   * Limit how many Applications to update.
   */
  limit?: number
}

/**
 * Application updateManyAndReturn
 */
export type ApplicationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * The data used to update Applications.
   */
  data: Prisma.XOR<Prisma.ApplicationUpdateManyMutationInput, Prisma.ApplicationUncheckedUpdateManyInput>
  /**
   * Filter which Applications to update
   */
  where?: Prisma.ApplicationWhereInput
  /**
   * Limit how many Applications to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Application upsert
 */
export type ApplicationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  /**
   * The filter to search for the Application to update in case it exists.
   */
  where: Prisma.ApplicationWhereUniqueInput
  /**
   * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
   */
  create: Prisma.XOR<Prisma.ApplicationCreateInput, Prisma.ApplicationUncheckedCreateInput>
  /**
   * In case the Application was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ApplicationUpdateInput, Prisma.ApplicationUncheckedUpdateInput>
}

/**
 * Application delete
 */
export type ApplicationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  /**
   * Filter which Application to delete.
   */
  where: Prisma.ApplicationWhereUniqueInput
}

/**
 * Application deleteMany
 */
export type ApplicationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Applications to delete
   */
  where?: Prisma.ApplicationWhereInput
  /**
   * Limit how many Applications to delete.
   */
  limit?: number
}

/**
 * Application.histories
 */
export type Application$historiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  where?: Prisma.ApplicationHistoryWhereInput
  orderBy?: Prisma.ApplicationHistoryOrderByWithRelationInput | Prisma.ApplicationHistoryOrderByWithRelationInput[]
  cursor?: Prisma.ApplicationHistoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ApplicationHistoryScalarFieldEnum | Prisma.ApplicationHistoryScalarFieldEnum[]
}

/**
 * Application without action
 */
export type ApplicationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
}
