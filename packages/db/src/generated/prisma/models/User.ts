
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `User` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model User
 * 
 */
export type UserModel = runtime.Types.Result.DefaultSelection<Prisma.$UserPayload>

export type AggregateUser = {
  _count: UserCountAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

export type UserMinAggregateOutputType = {
  userId: string | null
  clientId: string | null
  username: string | null
  email: string | null
  passwordHash: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserMaxAggregateOutputType = {
  userId: string | null
  clientId: string | null
  username: string | null
  email: string | null
  passwordHash: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserCountAggregateOutputType = {
  userId: number
  clientId: number
  username: number
  email: number
  passwordHash: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserMinAggregateInputType = {
  userId?: true
  clientId?: true
  username?: true
  email?: true
  passwordHash?: true
  createdAt?: true
  updatedAt?: true
}

export type UserMaxAggregateInputType = {
  userId?: true
  clientId?: true
  username?: true
  email?: true
  passwordHash?: true
  createdAt?: true
  updatedAt?: true
}

export type UserCountAggregateInputType = {
  userId?: true
  clientId?: true
  username?: true
  email?: true
  passwordHash?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which User to aggregate.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Users
  **/
  _count?: true | UserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends UserAggregateArgs> = {
      [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUser[P]>
    : Prisma.GetScalarType<T[P], AggregateUser[P]>
}




export type UserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithAggregationInput | Prisma.UserOrderByWithAggregationInput[]
  by: Prisma.UserScalarFieldEnum[] | Prisma.UserScalarFieldEnum
  having?: Prisma.UserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserCountAggregateInputType | true
  _min?: UserMinAggregateInputType
  _max?: UserMaxAggregateInputType
}

export type UserGroupByOutputType = {
  userId: string
  clientId: string
  username: string
  email: string
  passwordHash: string
  createdAt: Date
  updatedAt: Date
  _count: UserCountAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
      }
    >
  >



export type UserWhereInput = {
  AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  OR?: Prisma.UserWhereInput[]
  NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  userId?: Prisma.UuidFilter<"User"> | string
  clientId?: Prisma.UuidFilter<"User"> | string
  username?: Prisma.StringFilter<"User"> | string
  email?: Prisma.StringFilter<"User"> | string
  passwordHash?: Prisma.StringFilter<"User"> | string
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  applications?: Prisma.ApplicationListRelationFilter
  applicationHistories?: Prisma.ApplicationHistoryListRelationFilter
  userClientRoles?: Prisma.UserClientRoleListRelationFilter
  assignedUserClientRoles?: Prisma.UserClientRoleListRelationFilter
}

export type UserOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  passwordHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  client?: Prisma.ClientOrderByWithRelationInput
  applications?: Prisma.ApplicationOrderByRelationAggregateInput
  applicationHistories?: Prisma.ApplicationHistoryOrderByRelationAggregateInput
  userClientRoles?: Prisma.UserClientRoleOrderByRelationAggregateInput
  assignedUserClientRoles?: Prisma.UserClientRoleOrderByRelationAggregateInput
}

export type UserWhereUniqueInput = Prisma.AtLeast<{
  userId?: string
  username?: string
  email?: string
  AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  OR?: Prisma.UserWhereInput[]
  NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  clientId?: Prisma.UuidFilter<"User"> | string
  passwordHash?: Prisma.StringFilter<"User"> | string
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  applications?: Prisma.ApplicationListRelationFilter
  applicationHistories?: Prisma.ApplicationHistoryListRelationFilter
  userClientRoles?: Prisma.UserClientRoleListRelationFilter
  assignedUserClientRoles?: Prisma.UserClientRoleListRelationFilter
}, "userId" | "username" | "email">

export type UserOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  passwordHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserCountOrderByAggregateInput
  _max?: Prisma.UserMaxOrderByAggregateInput
  _min?: Prisma.UserMinOrderByAggregateInput
}

export type UserScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserScalarWhereWithAggregatesInput | Prisma.UserScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserScalarWhereWithAggregatesInput | Prisma.UserScalarWhereWithAggregatesInput[]
  userId?: Prisma.UuidWithAggregatesFilter<"User"> | string
  clientId?: Prisma.UuidWithAggregatesFilter<"User"> | string
  username?: Prisma.StringWithAggregatesFilter<"User"> | string
  email?: Prisma.StringWithAggregatesFilter<"User"> | string
  passwordHash?: Prisma.StringWithAggregatesFilter<"User"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string
}

export type UserCreateInput = {
  userId?: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutUsersInput
  applications?: Prisma.ApplicationCreateNestedManyWithoutUserInput
  applicationHistories?: Prisma.ApplicationHistoryCreateNestedManyWithoutChangedByUserInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutAssignedByUserInput
}

export type UserUncheckedCreateInput = {
  userId?: string
  clientId: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  applications?: Prisma.ApplicationUncheckedCreateNestedManyWithoutUserInput
  applicationHistories?: Prisma.ApplicationHistoryUncheckedCreateNestedManyWithoutChangedByUserInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutAssignedByUserInput
}

export type UserUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutUsersNestedInput
  applications?: Prisma.ApplicationUpdateManyWithoutUserNestedInput
  applicationHistories?: Prisma.ApplicationHistoryUpdateManyWithoutChangedByUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUpdateManyWithoutAssignedByUserNestedInput
}

export type UserUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applications?: Prisma.ApplicationUncheckedUpdateManyWithoutUserNestedInput
  applicationHistories?: Prisma.ApplicationHistoryUncheckedUpdateManyWithoutChangedByUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutAssignedByUserNestedInput
}

export type UserCreateManyInput = {
  userId?: string
  clientId: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUpdateManyMutationInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserListRelationFilter = {
  every?: Prisma.UserWhereInput
  some?: Prisma.UserWhereInput
  none?: Prisma.UserWhereInput
}

export type UserOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  passwordHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  passwordHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  email?: Prisma.SortOrder
  passwordHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserScalarRelationFilter = {
  is?: Prisma.UserWhereInput
  isNot?: Prisma.UserWhereInput
}

export type UserNullableScalarRelationFilter = {
  is?: Prisma.UserWhereInput | null
  isNot?: Prisma.UserWhereInput | null
}

export type UserCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutClientInput, Prisma.UserUncheckedCreateWithoutClientInput> | Prisma.UserCreateWithoutClientInput[] | Prisma.UserUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutClientInput | Prisma.UserCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.UserCreateManyClientInputEnvelope
  connect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
}

export type UserUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutClientInput, Prisma.UserUncheckedCreateWithoutClientInput> | Prisma.UserCreateWithoutClientInput[] | Prisma.UserUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutClientInput | Prisma.UserCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.UserCreateManyClientInputEnvelope
  connect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
}

export type UserUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutClientInput, Prisma.UserUncheckedCreateWithoutClientInput> | Prisma.UserCreateWithoutClientInput[] | Prisma.UserUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutClientInput | Prisma.UserCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.UserUpsertWithWhereUniqueWithoutClientInput | Prisma.UserUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.UserCreateManyClientInputEnvelope
  set?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  disconnect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  delete?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  connect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  update?: Prisma.UserUpdateWithWhereUniqueWithoutClientInput | Prisma.UserUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.UserUpdateManyWithWhereWithoutClientInput | Prisma.UserUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.UserScalarWhereInput | Prisma.UserScalarWhereInput[]
}

export type UserUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutClientInput, Prisma.UserUncheckedCreateWithoutClientInput> | Prisma.UserCreateWithoutClientInput[] | Prisma.UserUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutClientInput | Prisma.UserCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.UserUpsertWithWhereUniqueWithoutClientInput | Prisma.UserUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.UserCreateManyClientInputEnvelope
  set?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  disconnect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  delete?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  connect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  update?: Prisma.UserUpdateWithWhereUniqueWithoutClientInput | Prisma.UserUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.UserUpdateManyWithWhereWithoutClientInput | Prisma.UserUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.UserScalarWhereInput | Prisma.UserScalarWhereInput[]
}

export type UserCreateNestedOneWithoutApplicationsInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutApplicationsInput, Prisma.UserUncheckedCreateWithoutApplicationsInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutApplicationsInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutApplicationsNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutApplicationsInput, Prisma.UserUncheckedCreateWithoutApplicationsInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutApplicationsInput
  upsert?: Prisma.UserUpsertWithoutApplicationsInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutApplicationsInput, Prisma.UserUpdateWithoutApplicationsInput>, Prisma.UserUncheckedUpdateWithoutApplicationsInput>
}

export type UserCreateNestedOneWithoutApplicationHistoriesInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutApplicationHistoriesInput, Prisma.UserUncheckedCreateWithoutApplicationHistoriesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutApplicationHistoriesInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneWithoutApplicationHistoriesNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutApplicationHistoriesInput, Prisma.UserUncheckedCreateWithoutApplicationHistoriesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutApplicationHistoriesInput
  upsert?: Prisma.UserUpsertWithoutApplicationHistoriesInput
  disconnect?: Prisma.UserWhereInput | boolean
  delete?: Prisma.UserWhereInput | boolean
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutApplicationHistoriesInput, Prisma.UserUpdateWithoutApplicationHistoriesInput>, Prisma.UserUncheckedUpdateWithoutApplicationHistoriesInput>
}

export type UserCreateNestedOneWithoutUserClientRolesInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutUserClientRolesInput, Prisma.UserUncheckedCreateWithoutUserClientRolesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutUserClientRolesInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserCreateNestedOneWithoutAssignedUserClientRolesInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutAssignedUserClientRolesInput, Prisma.UserUncheckedCreateWithoutAssignedUserClientRolesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutAssignedUserClientRolesInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutUserClientRolesNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutUserClientRolesInput, Prisma.UserUncheckedCreateWithoutUserClientRolesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutUserClientRolesInput
  upsert?: Prisma.UserUpsertWithoutUserClientRolesInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutUserClientRolesInput, Prisma.UserUpdateWithoutUserClientRolesInput>, Prisma.UserUncheckedUpdateWithoutUserClientRolesInput>
}

export type UserUpdateOneWithoutAssignedUserClientRolesNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutAssignedUserClientRolesInput, Prisma.UserUncheckedCreateWithoutAssignedUserClientRolesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutAssignedUserClientRolesInput
  upsert?: Prisma.UserUpsertWithoutAssignedUserClientRolesInput
  disconnect?: Prisma.UserWhereInput | boolean
  delete?: Prisma.UserWhereInput | boolean
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutAssignedUserClientRolesInput, Prisma.UserUpdateWithoutAssignedUserClientRolesInput>, Prisma.UserUncheckedUpdateWithoutAssignedUserClientRolesInput>
}

export type UserCreateWithoutClientInput = {
  userId?: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  applications?: Prisma.ApplicationCreateNestedManyWithoutUserInput
  applicationHistories?: Prisma.ApplicationHistoryCreateNestedManyWithoutChangedByUserInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutAssignedByUserInput
}

export type UserUncheckedCreateWithoutClientInput = {
  userId?: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  applications?: Prisma.ApplicationUncheckedCreateNestedManyWithoutUserInput
  applicationHistories?: Prisma.ApplicationHistoryUncheckedCreateNestedManyWithoutChangedByUserInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutAssignedByUserInput
}

export type UserCreateOrConnectWithoutClientInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutClientInput, Prisma.UserUncheckedCreateWithoutClientInput>
}

export type UserCreateManyClientInputEnvelope = {
  data: Prisma.UserCreateManyClientInput | Prisma.UserCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type UserUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.UserWhereUniqueInput
  update: Prisma.XOR<Prisma.UserUpdateWithoutClientInput, Prisma.UserUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutClientInput, Prisma.UserUncheckedCreateWithoutClientInput>
}

export type UserUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.UserWhereUniqueInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutClientInput, Prisma.UserUncheckedUpdateWithoutClientInput>
}

export type UserUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.UserScalarWhereInput
  data: Prisma.XOR<Prisma.UserUpdateManyMutationInput, Prisma.UserUncheckedUpdateManyWithoutClientInput>
}

export type UserScalarWhereInput = {
  AND?: Prisma.UserScalarWhereInput | Prisma.UserScalarWhereInput[]
  OR?: Prisma.UserScalarWhereInput[]
  NOT?: Prisma.UserScalarWhereInput | Prisma.UserScalarWhereInput[]
  userId?: Prisma.UuidFilter<"User"> | string
  clientId?: Prisma.UuidFilter<"User"> | string
  username?: Prisma.StringFilter<"User"> | string
  email?: Prisma.StringFilter<"User"> | string
  passwordHash?: Prisma.StringFilter<"User"> | string
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
}

export type UserCreateWithoutApplicationsInput = {
  userId?: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutUsersInput
  applicationHistories?: Prisma.ApplicationHistoryCreateNestedManyWithoutChangedByUserInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutAssignedByUserInput
}

export type UserUncheckedCreateWithoutApplicationsInput = {
  userId?: string
  clientId: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  applicationHistories?: Prisma.ApplicationHistoryUncheckedCreateNestedManyWithoutChangedByUserInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutAssignedByUserInput
}

export type UserCreateOrConnectWithoutApplicationsInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutApplicationsInput, Prisma.UserUncheckedCreateWithoutApplicationsInput>
}

export type UserUpsertWithoutApplicationsInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutApplicationsInput, Prisma.UserUncheckedUpdateWithoutApplicationsInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutApplicationsInput, Prisma.UserUncheckedCreateWithoutApplicationsInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutApplicationsInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutApplicationsInput, Prisma.UserUncheckedUpdateWithoutApplicationsInput>
}

export type UserUpdateWithoutApplicationsInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutUsersNestedInput
  applicationHistories?: Prisma.ApplicationHistoryUpdateManyWithoutChangedByUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUpdateManyWithoutAssignedByUserNestedInput
}

export type UserUncheckedUpdateWithoutApplicationsInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applicationHistories?: Prisma.ApplicationHistoryUncheckedUpdateManyWithoutChangedByUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutAssignedByUserNestedInput
}

export type UserCreateWithoutApplicationHistoriesInput = {
  userId?: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutUsersInput
  applications?: Prisma.ApplicationCreateNestedManyWithoutUserInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutAssignedByUserInput
}

export type UserUncheckedCreateWithoutApplicationHistoriesInput = {
  userId?: string
  clientId: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  applications?: Prisma.ApplicationUncheckedCreateNestedManyWithoutUserInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutAssignedByUserInput
}

export type UserCreateOrConnectWithoutApplicationHistoriesInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutApplicationHistoriesInput, Prisma.UserUncheckedCreateWithoutApplicationHistoriesInput>
}

export type UserUpsertWithoutApplicationHistoriesInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutApplicationHistoriesInput, Prisma.UserUncheckedUpdateWithoutApplicationHistoriesInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutApplicationHistoriesInput, Prisma.UserUncheckedCreateWithoutApplicationHistoriesInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutApplicationHistoriesInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutApplicationHistoriesInput, Prisma.UserUncheckedUpdateWithoutApplicationHistoriesInput>
}

export type UserUpdateWithoutApplicationHistoriesInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutUsersNestedInput
  applications?: Prisma.ApplicationUpdateManyWithoutUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUpdateManyWithoutAssignedByUserNestedInput
}

export type UserUncheckedUpdateWithoutApplicationHistoriesInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applications?: Prisma.ApplicationUncheckedUpdateManyWithoutUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutAssignedByUserNestedInput
}

export type UserCreateWithoutUserClientRolesInput = {
  userId?: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutUsersInput
  applications?: Prisma.ApplicationCreateNestedManyWithoutUserInput
  applicationHistories?: Prisma.ApplicationHistoryCreateNestedManyWithoutChangedByUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutAssignedByUserInput
}

export type UserUncheckedCreateWithoutUserClientRolesInput = {
  userId?: string
  clientId: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  applications?: Prisma.ApplicationUncheckedCreateNestedManyWithoutUserInput
  applicationHistories?: Prisma.ApplicationHistoryUncheckedCreateNestedManyWithoutChangedByUserInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutAssignedByUserInput
}

export type UserCreateOrConnectWithoutUserClientRolesInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutUserClientRolesInput, Prisma.UserUncheckedCreateWithoutUserClientRolesInput>
}

export type UserCreateWithoutAssignedUserClientRolesInput = {
  userId?: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutUsersInput
  applications?: Prisma.ApplicationCreateNestedManyWithoutUserInput
  applicationHistories?: Prisma.ApplicationHistoryCreateNestedManyWithoutChangedByUserInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutAssignedUserClientRolesInput = {
  userId?: string
  clientId: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  applications?: Prisma.ApplicationUncheckedCreateNestedManyWithoutUserInput
  applicationHistories?: Prisma.ApplicationHistoryUncheckedCreateNestedManyWithoutChangedByUserInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutAssignedUserClientRolesInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutAssignedUserClientRolesInput, Prisma.UserUncheckedCreateWithoutAssignedUserClientRolesInput>
}

export type UserUpsertWithoutUserClientRolesInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutUserClientRolesInput, Prisma.UserUncheckedUpdateWithoutUserClientRolesInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutUserClientRolesInput, Prisma.UserUncheckedCreateWithoutUserClientRolesInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutUserClientRolesInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutUserClientRolesInput, Prisma.UserUncheckedUpdateWithoutUserClientRolesInput>
}

export type UserUpdateWithoutUserClientRolesInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutUsersNestedInput
  applications?: Prisma.ApplicationUpdateManyWithoutUserNestedInput
  applicationHistories?: Prisma.ApplicationHistoryUpdateManyWithoutChangedByUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUpdateManyWithoutAssignedByUserNestedInput
}

export type UserUncheckedUpdateWithoutUserClientRolesInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applications?: Prisma.ApplicationUncheckedUpdateManyWithoutUserNestedInput
  applicationHistories?: Prisma.ApplicationHistoryUncheckedUpdateManyWithoutChangedByUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutAssignedByUserNestedInput
}

export type UserUpsertWithoutAssignedUserClientRolesInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutAssignedUserClientRolesInput, Prisma.UserUncheckedUpdateWithoutAssignedUserClientRolesInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutAssignedUserClientRolesInput, Prisma.UserUncheckedCreateWithoutAssignedUserClientRolesInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutAssignedUserClientRolesInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutAssignedUserClientRolesInput, Prisma.UserUncheckedUpdateWithoutAssignedUserClientRolesInput>
}

export type UserUpdateWithoutAssignedUserClientRolesInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutUsersNestedInput
  applications?: Prisma.ApplicationUpdateManyWithoutUserNestedInput
  applicationHistories?: Prisma.ApplicationHistoryUpdateManyWithoutChangedByUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutAssignedUserClientRolesInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applications?: Prisma.ApplicationUncheckedUpdateManyWithoutUserNestedInput
  applicationHistories?: Prisma.ApplicationHistoryUncheckedUpdateManyWithoutChangedByUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateManyClientInput = {
  userId?: string
  username: string
  email: string
  passwordHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUpdateWithoutClientInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applications?: Prisma.ApplicationUpdateManyWithoutUserNestedInput
  applicationHistories?: Prisma.ApplicationHistoryUpdateManyWithoutChangedByUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUpdateManyWithoutAssignedByUserNestedInput
}

export type UserUncheckedUpdateWithoutClientInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applications?: Prisma.ApplicationUncheckedUpdateManyWithoutUserNestedInput
  applicationHistories?: Prisma.ApplicationHistoryUncheckedUpdateManyWithoutChangedByUserNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutUserNestedInput
  assignedUserClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutAssignedByUserNestedInput
}

export type UserUncheckedUpdateManyWithoutClientInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  passwordHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type UserCountOutputType
 */

export type UserCountOutputType = {
  applications: number
  applicationHistories: number
  userClientRoles: number
  assignedUserClientRoles: number
}

export type UserCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applications?: boolean | UserCountOutputTypeCountApplicationsArgs
  applicationHistories?: boolean | UserCountOutputTypeCountApplicationHistoriesArgs
  userClientRoles?: boolean | UserCountOutputTypeCountUserClientRolesArgs
  assignedUserClientRoles?: boolean | UserCountOutputTypeCountAssignedUserClientRolesArgs
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCountOutputType
   */
  select?: Prisma.UserCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountApplicationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ApplicationWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountApplicationHistoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ApplicationHistoryWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountUserClientRolesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserClientRoleWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountAssignedUserClientRolesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserClientRoleWhereInput
}


export type UserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  clientId?: boolean
  username?: boolean
  email?: boolean
  passwordHash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  applications?: boolean | Prisma.User$applicationsArgs<ExtArgs>
  applicationHistories?: boolean | Prisma.User$applicationHistoriesArgs<ExtArgs>
  userClientRoles?: boolean | Prisma.User$userClientRolesArgs<ExtArgs>
  assignedUserClientRoles?: boolean | Prisma.User$assignedUserClientRolesArgs<ExtArgs>
  _count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["user"]>

export type UserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  clientId?: boolean
  username?: boolean
  email?: boolean
  passwordHash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
}, ExtArgs["result"]["user"]>

export type UserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  clientId?: boolean
  username?: boolean
  email?: boolean
  passwordHash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
}, ExtArgs["result"]["user"]>

export type UserSelectScalar = {
  userId?: boolean
  clientId?: boolean
  username?: boolean
  email?: boolean
  passwordHash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "clientId" | "username" | "email" | "passwordHash" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
export type UserInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  applications?: boolean | Prisma.User$applicationsArgs<ExtArgs>
  applicationHistories?: boolean | Prisma.User$applicationHistoriesArgs<ExtArgs>
  userClientRoles?: boolean | Prisma.User$userClientRolesArgs<ExtArgs>
  assignedUserClientRoles?: boolean | Prisma.User$assignedUserClientRolesArgs<ExtArgs>
  _count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>
}
export type UserIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
}
export type UserIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
}

export type $UserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    client: Prisma.$ClientPayload<ExtArgs>
    applications: Prisma.$ApplicationPayload<ExtArgs>[]
    applicationHistories: Prisma.$ApplicationHistoryPayload<ExtArgs>[]
    userClientRoles: Prisma.$UserClientRolePayload<ExtArgs>[]
    assignedUserClientRoles: Prisma.$UserClientRolePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    clientId: string
    username: string
    email: string
    passwordHash: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

export type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserPayload, S>

export type UserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserCountAggregateInputType | true
  }

export interface UserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
  /**
   * Find zero or one User that matches the filter.
   * @param {UserFindUniqueArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserFindUniqueArgs>(args: Prisma.SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one User that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindFirstArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserFindFirstArgs>(args?: Prisma.SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Users that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserFindManyArgs>(args?: Prisma.SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
   */
  create<T extends UserCreateArgs>(args: Prisma.SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Users.
   * @param {UserCreateManyArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const user = await prisma.user.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserCreateManyArgs>(args?: Prisma.SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Users and returns the data saved in the database.
   * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const user = await prisma.user.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Users and only return the `userId`
   * const userWithUserIdOnly = await prisma.user.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
   */
  delete<T extends UserDeleteArgs>(args: Prisma.SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserUpdateArgs>(args: Prisma.SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserUpdateManyArgs>(args: Prisma.SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users and returns the data updated in the database.
   * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Users and only return the `userId`
   * const userWithUserIdOnly = await prisma.user.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
   */
  upsert<T extends UserUpsertArgs>(args: Prisma.SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCountArgs} args - Arguments to filter Users to count.
   * @example
   * // Count the number of Users
   * const count = await prisma.user.count({
   *   where: {
   *     // ... the filter for the Users we want to count
   *   }
   * })
  **/
  count<T extends UserCountArgs>(
    args?: Prisma.Subset<T, UserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserAggregateArgs>(args: Prisma.Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

  /**
   * Group by User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserGroupByArgs['orderBy'] }
      : { orderBy?: UserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the User model
 */
readonly fields: UserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  client<T extends Prisma.ClientDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClientDefaultArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  applications<T extends Prisma.User$applicationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  applicationHistories<T extends Prisma.User$applicationHistoriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$applicationHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  userClientRoles<T extends Prisma.User$userClientRolesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$userClientRolesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserClientRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  assignedUserClientRoles<T extends Prisma.User$assignedUserClientRolesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$assignedUserClientRolesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserClientRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the User model
 */
export interface UserFieldRefs {
  readonly userId: Prisma.FieldRef<"User", 'String'>
  readonly clientId: Prisma.FieldRef<"User", 'String'>
  readonly username: Prisma.FieldRef<"User", 'String'>
  readonly email: Prisma.FieldRef<"User", 'String'>
  readonly passwordHash: Prisma.FieldRef<"User", 'String'>
  readonly createdAt: Prisma.FieldRef<"User", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"User", 'DateTime'>
}
    

// Custom InputTypes
/**
 * User findUnique
 */
export type UserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User findUniqueOrThrow
 */
export type UserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User findFirst
 */
export type UserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User findFirstOrThrow
 */
export type UserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User findMany
 */
export type UserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which Users to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User create
 */
export type UserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The data needed to create a User.
   */
  data: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>
}

/**
 * User createMany
 */
export type UserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Users.
   */
  data: Prisma.UserCreateManyInput | Prisma.UserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * User createManyAndReturn
 */
export type UserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * The data used to create many Users.
   */
  data: Prisma.UserCreateManyInput | Prisma.UserCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * User update
 */
export type UserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The data needed to update a User.
   */
  data: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>
  /**
   * Choose, which User to update.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User updateMany
 */
export type UserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Users.
   */
  data: Prisma.XOR<Prisma.UserUpdateManyMutationInput, Prisma.UserUncheckedUpdateManyInput>
  /**
   * Filter which Users to update
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to update.
   */
  limit?: number
}

/**
 * User updateManyAndReturn
 */
export type UserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * The data used to update Users.
   */
  data: Prisma.XOR<Prisma.UserUpdateManyMutationInput, Prisma.UserUncheckedUpdateManyInput>
  /**
   * Filter which Users to update
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * User upsert
 */
export type UserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The filter to search for the User to update in case it exists.
   */
  where: Prisma.UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
   */
  create: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>
}

/**
 * User delete
 */
export type UserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter which User to delete.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User deleteMany
 */
export type UserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Users to delete
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to delete.
   */
  limit?: number
}

/**
 * User.applications
 */
export type User$applicationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Application
   */
  select?: Prisma.ApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Application
   */
  omit?: Prisma.ApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationInclude<ExtArgs> | null
  where?: Prisma.ApplicationWhereInput
  orderBy?: Prisma.ApplicationOrderByWithRelationInput | Prisma.ApplicationOrderByWithRelationInput[]
  cursor?: Prisma.ApplicationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ApplicationScalarFieldEnum | Prisma.ApplicationScalarFieldEnum[]
}

/**
 * User.applicationHistories
 */
export type User$applicationHistoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  where?: Prisma.ApplicationHistoryWhereInput
  orderBy?: Prisma.ApplicationHistoryOrderByWithRelationInput | Prisma.ApplicationHistoryOrderByWithRelationInput[]
  cursor?: Prisma.ApplicationHistoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ApplicationHistoryScalarFieldEnum | Prisma.ApplicationHistoryScalarFieldEnum[]
}

/**
 * User.userClientRoles
 */
export type User$userClientRolesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserClientRole
   */
  select?: Prisma.UserClientRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserClientRole
   */
  omit?: Prisma.UserClientRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserClientRoleInclude<ExtArgs> | null
  where?: Prisma.UserClientRoleWhereInput
  orderBy?: Prisma.UserClientRoleOrderByWithRelationInput | Prisma.UserClientRoleOrderByWithRelationInput[]
  cursor?: Prisma.UserClientRoleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserClientRoleScalarFieldEnum | Prisma.UserClientRoleScalarFieldEnum[]
}

/**
 * User.assignedUserClientRoles
 */
export type User$assignedUserClientRolesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserClientRole
   */
  select?: Prisma.UserClientRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserClientRole
   */
  omit?: Prisma.UserClientRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserClientRoleInclude<ExtArgs> | null
  where?: Prisma.UserClientRoleWhereInput
  orderBy?: Prisma.UserClientRoleOrderByWithRelationInput | Prisma.UserClientRoleOrderByWithRelationInput[]
  cursor?: Prisma.UserClientRoleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserClientRoleScalarFieldEnum | Prisma.UserClientRoleScalarFieldEnum[]
}

/**
 * User without action
 */
export type UserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
}
