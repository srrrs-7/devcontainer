
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ApplicationHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ApplicationHistory
 * 
 */
export type ApplicationHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$ApplicationHistoryPayload>

export type AggregateApplicationHistory = {
  _count: ApplicationHistoryCountAggregateOutputType | null
  _min: ApplicationHistoryMinAggregateOutputType | null
  _max: ApplicationHistoryMaxAggregateOutputType | null
}

export type ApplicationHistoryMinAggregateOutputType = {
  historyId: string | null
  applicationId: string | null
  changedByUserId: string | null
  status: $Enums.ApplicationStatus | null
  comment: string | null
  changeDate: Date | null
}

export type ApplicationHistoryMaxAggregateOutputType = {
  historyId: string | null
  applicationId: string | null
  changedByUserId: string | null
  status: $Enums.ApplicationStatus | null
  comment: string | null
  changeDate: Date | null
}

export type ApplicationHistoryCountAggregateOutputType = {
  historyId: number
  applicationId: number
  changedByUserId: number
  status: number
  comment: number
  changeDate: number
  _all: number
}


export type ApplicationHistoryMinAggregateInputType = {
  historyId?: true
  applicationId?: true
  changedByUserId?: true
  status?: true
  comment?: true
  changeDate?: true
}

export type ApplicationHistoryMaxAggregateInputType = {
  historyId?: true
  applicationId?: true
  changedByUserId?: true
  status?: true
  comment?: true
  changeDate?: true
}

export type ApplicationHistoryCountAggregateInputType = {
  historyId?: true
  applicationId?: true
  changedByUserId?: true
  status?: true
  comment?: true
  changeDate?: true
  _all?: true
}

export type ApplicationHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ApplicationHistory to aggregate.
   */
  where?: Prisma.ApplicationHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApplicationHistories to fetch.
   */
  orderBy?: Prisma.ApplicationHistoryOrderByWithRelationInput | Prisma.ApplicationHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ApplicationHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApplicationHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApplicationHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ApplicationHistories
  **/
  _count?: true | ApplicationHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ApplicationHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ApplicationHistoryMaxAggregateInputType
}

export type GetApplicationHistoryAggregateType<T extends ApplicationHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateApplicationHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateApplicationHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateApplicationHistory[P]>
}




export type ApplicationHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ApplicationHistoryWhereInput
  orderBy?: Prisma.ApplicationHistoryOrderByWithAggregationInput | Prisma.ApplicationHistoryOrderByWithAggregationInput[]
  by: Prisma.ApplicationHistoryScalarFieldEnum[] | Prisma.ApplicationHistoryScalarFieldEnum
  having?: Prisma.ApplicationHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ApplicationHistoryCountAggregateInputType | true
  _min?: ApplicationHistoryMinAggregateInputType
  _max?: ApplicationHistoryMaxAggregateInputType
}

export type ApplicationHistoryGroupByOutputType = {
  historyId: string
  applicationId: string
  changedByUserId: string | null
  status: $Enums.ApplicationStatus
  comment: string | null
  changeDate: Date
  _count: ApplicationHistoryCountAggregateOutputType | null
  _min: ApplicationHistoryMinAggregateOutputType | null
  _max: ApplicationHistoryMaxAggregateOutputType | null
}

type GetApplicationHistoryGroupByPayload<T extends ApplicationHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ApplicationHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ApplicationHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ApplicationHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ApplicationHistoryGroupByOutputType[P]>
      }
    >
  >



export type ApplicationHistoryWhereInput = {
  AND?: Prisma.ApplicationHistoryWhereInput | Prisma.ApplicationHistoryWhereInput[]
  OR?: Prisma.ApplicationHistoryWhereInput[]
  NOT?: Prisma.ApplicationHistoryWhereInput | Prisma.ApplicationHistoryWhereInput[]
  historyId?: Prisma.UuidFilter<"ApplicationHistory"> | string
  applicationId?: Prisma.UuidFilter<"ApplicationHistory"> | string
  changedByUserId?: Prisma.UuidNullableFilter<"ApplicationHistory"> | string | null
  status?: Prisma.EnumApplicationStatusFilter<"ApplicationHistory"> | $Enums.ApplicationStatus
  comment?: Prisma.StringNullableFilter<"ApplicationHistory"> | string | null
  changeDate?: Prisma.DateTimeFilter<"ApplicationHistory"> | Date | string
  application?: Prisma.XOR<Prisma.ApplicationScalarRelationFilter, Prisma.ApplicationWhereInput>
  changedByUser?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type ApplicationHistoryOrderByWithRelationInput = {
  historyId?: Prisma.SortOrder
  applicationId?: Prisma.SortOrder
  changedByUserId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  changeDate?: Prisma.SortOrder
  application?: Prisma.ApplicationOrderByWithRelationInput
  changedByUser?: Prisma.UserOrderByWithRelationInput
}

export type ApplicationHistoryWhereUniqueInput = Prisma.AtLeast<{
  historyId?: string
  AND?: Prisma.ApplicationHistoryWhereInput | Prisma.ApplicationHistoryWhereInput[]
  OR?: Prisma.ApplicationHistoryWhereInput[]
  NOT?: Prisma.ApplicationHistoryWhereInput | Prisma.ApplicationHistoryWhereInput[]
  applicationId?: Prisma.UuidFilter<"ApplicationHistory"> | string
  changedByUserId?: Prisma.UuidNullableFilter<"ApplicationHistory"> | string | null
  status?: Prisma.EnumApplicationStatusFilter<"ApplicationHistory"> | $Enums.ApplicationStatus
  comment?: Prisma.StringNullableFilter<"ApplicationHistory"> | string | null
  changeDate?: Prisma.DateTimeFilter<"ApplicationHistory"> | Date | string
  application?: Prisma.XOR<Prisma.ApplicationScalarRelationFilter, Prisma.ApplicationWhereInput>
  changedByUser?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "historyId">

export type ApplicationHistoryOrderByWithAggregationInput = {
  historyId?: Prisma.SortOrder
  applicationId?: Prisma.SortOrder
  changedByUserId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  changeDate?: Prisma.SortOrder
  _count?: Prisma.ApplicationHistoryCountOrderByAggregateInput
  _max?: Prisma.ApplicationHistoryMaxOrderByAggregateInput
  _min?: Prisma.ApplicationHistoryMinOrderByAggregateInput
}

export type ApplicationHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.ApplicationHistoryScalarWhereWithAggregatesInput | Prisma.ApplicationHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.ApplicationHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ApplicationHistoryScalarWhereWithAggregatesInput | Prisma.ApplicationHistoryScalarWhereWithAggregatesInput[]
  historyId?: Prisma.UuidWithAggregatesFilter<"ApplicationHistory"> | string
  applicationId?: Prisma.UuidWithAggregatesFilter<"ApplicationHistory"> | string
  changedByUserId?: Prisma.UuidNullableWithAggregatesFilter<"ApplicationHistory"> | string | null
  status?: Prisma.EnumApplicationStatusWithAggregatesFilter<"ApplicationHistory"> | $Enums.ApplicationStatus
  comment?: Prisma.StringNullableWithAggregatesFilter<"ApplicationHistory"> | string | null
  changeDate?: Prisma.DateTimeWithAggregatesFilter<"ApplicationHistory"> | Date | string
}

export type ApplicationHistoryCreateInput = {
  historyId?: string
  status: $Enums.ApplicationStatus
  comment?: string | null
  changeDate?: Date | string
  application: Prisma.ApplicationCreateNestedOneWithoutHistoriesInput
  changedByUser?: Prisma.UserCreateNestedOneWithoutApplicationHistoriesInput
}

export type ApplicationHistoryUncheckedCreateInput = {
  historyId?: string
  applicationId: string
  changedByUserId?: string | null
  status: $Enums.ApplicationStatus
  comment?: string | null
  changeDate?: Date | string
}

export type ApplicationHistoryUpdateInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  application?: Prisma.ApplicationUpdateOneRequiredWithoutHistoriesNestedInput
  changedByUser?: Prisma.UserUpdateOneWithoutApplicationHistoriesNestedInput
}

export type ApplicationHistoryUncheckedUpdateInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  changedByUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicationHistoryCreateManyInput = {
  historyId?: string
  applicationId: string
  changedByUserId?: string | null
  status: $Enums.ApplicationStatus
  comment?: string | null
  changeDate?: Date | string
}

export type ApplicationHistoryUpdateManyMutationInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicationHistoryUncheckedUpdateManyInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  changedByUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicationHistoryListRelationFilter = {
  every?: Prisma.ApplicationHistoryWhereInput
  some?: Prisma.ApplicationHistoryWhereInput
  none?: Prisma.ApplicationHistoryWhereInput
}

export type ApplicationHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ApplicationHistoryCountOrderByAggregateInput = {
  historyId?: Prisma.SortOrder
  applicationId?: Prisma.SortOrder
  changedByUserId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  changeDate?: Prisma.SortOrder
}

export type ApplicationHistoryMaxOrderByAggregateInput = {
  historyId?: Prisma.SortOrder
  applicationId?: Prisma.SortOrder
  changedByUserId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  changeDate?: Prisma.SortOrder
}

export type ApplicationHistoryMinOrderByAggregateInput = {
  historyId?: Prisma.SortOrder
  applicationId?: Prisma.SortOrder
  changedByUserId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  changeDate?: Prisma.SortOrder
}

export type ApplicationHistoryCreateNestedManyWithoutChangedByUserInput = {
  create?: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutChangedByUserInput, Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput> | Prisma.ApplicationHistoryCreateWithoutChangedByUserInput[] | Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput[]
  connectOrCreate?: Prisma.ApplicationHistoryCreateOrConnectWithoutChangedByUserInput | Prisma.ApplicationHistoryCreateOrConnectWithoutChangedByUserInput[]
  createMany?: Prisma.ApplicationHistoryCreateManyChangedByUserInputEnvelope
  connect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
}

export type ApplicationHistoryUncheckedCreateNestedManyWithoutChangedByUserInput = {
  create?: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutChangedByUserInput, Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput> | Prisma.ApplicationHistoryCreateWithoutChangedByUserInput[] | Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput[]
  connectOrCreate?: Prisma.ApplicationHistoryCreateOrConnectWithoutChangedByUserInput | Prisma.ApplicationHistoryCreateOrConnectWithoutChangedByUserInput[]
  createMany?: Prisma.ApplicationHistoryCreateManyChangedByUserInputEnvelope
  connect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
}

export type ApplicationHistoryUpdateManyWithoutChangedByUserNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutChangedByUserInput, Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput> | Prisma.ApplicationHistoryCreateWithoutChangedByUserInput[] | Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput[]
  connectOrCreate?: Prisma.ApplicationHistoryCreateOrConnectWithoutChangedByUserInput | Prisma.ApplicationHistoryCreateOrConnectWithoutChangedByUserInput[]
  upsert?: Prisma.ApplicationHistoryUpsertWithWhereUniqueWithoutChangedByUserInput | Prisma.ApplicationHistoryUpsertWithWhereUniqueWithoutChangedByUserInput[]
  createMany?: Prisma.ApplicationHistoryCreateManyChangedByUserInputEnvelope
  set?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  disconnect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  delete?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  connect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  update?: Prisma.ApplicationHistoryUpdateWithWhereUniqueWithoutChangedByUserInput | Prisma.ApplicationHistoryUpdateWithWhereUniqueWithoutChangedByUserInput[]
  updateMany?: Prisma.ApplicationHistoryUpdateManyWithWhereWithoutChangedByUserInput | Prisma.ApplicationHistoryUpdateManyWithWhereWithoutChangedByUserInput[]
  deleteMany?: Prisma.ApplicationHistoryScalarWhereInput | Prisma.ApplicationHistoryScalarWhereInput[]
}

export type ApplicationHistoryUncheckedUpdateManyWithoutChangedByUserNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutChangedByUserInput, Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput> | Prisma.ApplicationHistoryCreateWithoutChangedByUserInput[] | Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput[]
  connectOrCreate?: Prisma.ApplicationHistoryCreateOrConnectWithoutChangedByUserInput | Prisma.ApplicationHistoryCreateOrConnectWithoutChangedByUserInput[]
  upsert?: Prisma.ApplicationHistoryUpsertWithWhereUniqueWithoutChangedByUserInput | Prisma.ApplicationHistoryUpsertWithWhereUniqueWithoutChangedByUserInput[]
  createMany?: Prisma.ApplicationHistoryCreateManyChangedByUserInputEnvelope
  set?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  disconnect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  delete?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  connect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  update?: Prisma.ApplicationHistoryUpdateWithWhereUniqueWithoutChangedByUserInput | Prisma.ApplicationHistoryUpdateWithWhereUniqueWithoutChangedByUserInput[]
  updateMany?: Prisma.ApplicationHistoryUpdateManyWithWhereWithoutChangedByUserInput | Prisma.ApplicationHistoryUpdateManyWithWhereWithoutChangedByUserInput[]
  deleteMany?: Prisma.ApplicationHistoryScalarWhereInput | Prisma.ApplicationHistoryScalarWhereInput[]
}

export type ApplicationHistoryCreateNestedManyWithoutApplicationInput = {
  create?: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutApplicationInput, Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput> | Prisma.ApplicationHistoryCreateWithoutApplicationInput[] | Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput[]
  connectOrCreate?: Prisma.ApplicationHistoryCreateOrConnectWithoutApplicationInput | Prisma.ApplicationHistoryCreateOrConnectWithoutApplicationInput[]
  createMany?: Prisma.ApplicationHistoryCreateManyApplicationInputEnvelope
  connect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
}

export type ApplicationHistoryUncheckedCreateNestedManyWithoutApplicationInput = {
  create?: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutApplicationInput, Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput> | Prisma.ApplicationHistoryCreateWithoutApplicationInput[] | Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput[]
  connectOrCreate?: Prisma.ApplicationHistoryCreateOrConnectWithoutApplicationInput | Prisma.ApplicationHistoryCreateOrConnectWithoutApplicationInput[]
  createMany?: Prisma.ApplicationHistoryCreateManyApplicationInputEnvelope
  connect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
}

export type ApplicationHistoryUpdateManyWithoutApplicationNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutApplicationInput, Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput> | Prisma.ApplicationHistoryCreateWithoutApplicationInput[] | Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput[]
  connectOrCreate?: Prisma.ApplicationHistoryCreateOrConnectWithoutApplicationInput | Prisma.ApplicationHistoryCreateOrConnectWithoutApplicationInput[]
  upsert?: Prisma.ApplicationHistoryUpsertWithWhereUniqueWithoutApplicationInput | Prisma.ApplicationHistoryUpsertWithWhereUniqueWithoutApplicationInput[]
  createMany?: Prisma.ApplicationHistoryCreateManyApplicationInputEnvelope
  set?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  disconnect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  delete?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  connect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  update?: Prisma.ApplicationHistoryUpdateWithWhereUniqueWithoutApplicationInput | Prisma.ApplicationHistoryUpdateWithWhereUniqueWithoutApplicationInput[]
  updateMany?: Prisma.ApplicationHistoryUpdateManyWithWhereWithoutApplicationInput | Prisma.ApplicationHistoryUpdateManyWithWhereWithoutApplicationInput[]
  deleteMany?: Prisma.ApplicationHistoryScalarWhereInput | Prisma.ApplicationHistoryScalarWhereInput[]
}

export type ApplicationHistoryUncheckedUpdateManyWithoutApplicationNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutApplicationInput, Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput> | Prisma.ApplicationHistoryCreateWithoutApplicationInput[] | Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput[]
  connectOrCreate?: Prisma.ApplicationHistoryCreateOrConnectWithoutApplicationInput | Prisma.ApplicationHistoryCreateOrConnectWithoutApplicationInput[]
  upsert?: Prisma.ApplicationHistoryUpsertWithWhereUniqueWithoutApplicationInput | Prisma.ApplicationHistoryUpsertWithWhereUniqueWithoutApplicationInput[]
  createMany?: Prisma.ApplicationHistoryCreateManyApplicationInputEnvelope
  set?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  disconnect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  delete?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  connect?: Prisma.ApplicationHistoryWhereUniqueInput | Prisma.ApplicationHistoryWhereUniqueInput[]
  update?: Prisma.ApplicationHistoryUpdateWithWhereUniqueWithoutApplicationInput | Prisma.ApplicationHistoryUpdateWithWhereUniqueWithoutApplicationInput[]
  updateMany?: Prisma.ApplicationHistoryUpdateManyWithWhereWithoutApplicationInput | Prisma.ApplicationHistoryUpdateManyWithWhereWithoutApplicationInput[]
  deleteMany?: Prisma.ApplicationHistoryScalarWhereInput | Prisma.ApplicationHistoryScalarWhereInput[]
}

export type EnumApplicationStatusFieldUpdateOperationsInput = {
  set?: $Enums.ApplicationStatus
}

export type ApplicationHistoryCreateWithoutChangedByUserInput = {
  historyId?: string
  status: $Enums.ApplicationStatus
  comment?: string | null
  changeDate?: Date | string
  application: Prisma.ApplicationCreateNestedOneWithoutHistoriesInput
}

export type ApplicationHistoryUncheckedCreateWithoutChangedByUserInput = {
  historyId?: string
  applicationId: string
  status: $Enums.ApplicationStatus
  comment?: string | null
  changeDate?: Date | string
}

export type ApplicationHistoryCreateOrConnectWithoutChangedByUserInput = {
  where: Prisma.ApplicationHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutChangedByUserInput, Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput>
}

export type ApplicationHistoryCreateManyChangedByUserInputEnvelope = {
  data: Prisma.ApplicationHistoryCreateManyChangedByUserInput | Prisma.ApplicationHistoryCreateManyChangedByUserInput[]
  skipDuplicates?: boolean
}

export type ApplicationHistoryUpsertWithWhereUniqueWithoutChangedByUserInput = {
  where: Prisma.ApplicationHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.ApplicationHistoryUpdateWithoutChangedByUserInput, Prisma.ApplicationHistoryUncheckedUpdateWithoutChangedByUserInput>
  create: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutChangedByUserInput, Prisma.ApplicationHistoryUncheckedCreateWithoutChangedByUserInput>
}

export type ApplicationHistoryUpdateWithWhereUniqueWithoutChangedByUserInput = {
  where: Prisma.ApplicationHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.ApplicationHistoryUpdateWithoutChangedByUserInput, Prisma.ApplicationHistoryUncheckedUpdateWithoutChangedByUserInput>
}

export type ApplicationHistoryUpdateManyWithWhereWithoutChangedByUserInput = {
  where: Prisma.ApplicationHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.ApplicationHistoryUpdateManyMutationInput, Prisma.ApplicationHistoryUncheckedUpdateManyWithoutChangedByUserInput>
}

export type ApplicationHistoryScalarWhereInput = {
  AND?: Prisma.ApplicationHistoryScalarWhereInput | Prisma.ApplicationHistoryScalarWhereInput[]
  OR?: Prisma.ApplicationHistoryScalarWhereInput[]
  NOT?: Prisma.ApplicationHistoryScalarWhereInput | Prisma.ApplicationHistoryScalarWhereInput[]
  historyId?: Prisma.UuidFilter<"ApplicationHistory"> | string
  applicationId?: Prisma.UuidFilter<"ApplicationHistory"> | string
  changedByUserId?: Prisma.UuidNullableFilter<"ApplicationHistory"> | string | null
  status?: Prisma.EnumApplicationStatusFilter<"ApplicationHistory"> | $Enums.ApplicationStatus
  comment?: Prisma.StringNullableFilter<"ApplicationHistory"> | string | null
  changeDate?: Prisma.DateTimeFilter<"ApplicationHistory"> | Date | string
}

export type ApplicationHistoryCreateWithoutApplicationInput = {
  historyId?: string
  status: $Enums.ApplicationStatus
  comment?: string | null
  changeDate?: Date | string
  changedByUser?: Prisma.UserCreateNestedOneWithoutApplicationHistoriesInput
}

export type ApplicationHistoryUncheckedCreateWithoutApplicationInput = {
  historyId?: string
  changedByUserId?: string | null
  status: $Enums.ApplicationStatus
  comment?: string | null
  changeDate?: Date | string
}

export type ApplicationHistoryCreateOrConnectWithoutApplicationInput = {
  where: Prisma.ApplicationHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutApplicationInput, Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput>
}

export type ApplicationHistoryCreateManyApplicationInputEnvelope = {
  data: Prisma.ApplicationHistoryCreateManyApplicationInput | Prisma.ApplicationHistoryCreateManyApplicationInput[]
  skipDuplicates?: boolean
}

export type ApplicationHistoryUpsertWithWhereUniqueWithoutApplicationInput = {
  where: Prisma.ApplicationHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.ApplicationHistoryUpdateWithoutApplicationInput, Prisma.ApplicationHistoryUncheckedUpdateWithoutApplicationInput>
  create: Prisma.XOR<Prisma.ApplicationHistoryCreateWithoutApplicationInput, Prisma.ApplicationHistoryUncheckedCreateWithoutApplicationInput>
}

export type ApplicationHistoryUpdateWithWhereUniqueWithoutApplicationInput = {
  where: Prisma.ApplicationHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.ApplicationHistoryUpdateWithoutApplicationInput, Prisma.ApplicationHistoryUncheckedUpdateWithoutApplicationInput>
}

export type ApplicationHistoryUpdateManyWithWhereWithoutApplicationInput = {
  where: Prisma.ApplicationHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.ApplicationHistoryUpdateManyMutationInput, Prisma.ApplicationHistoryUncheckedUpdateManyWithoutApplicationInput>
}

export type ApplicationHistoryCreateManyChangedByUserInput = {
  historyId?: string
  applicationId: string
  status: $Enums.ApplicationStatus
  comment?: string | null
  changeDate?: Date | string
}

export type ApplicationHistoryUpdateWithoutChangedByUserInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  application?: Prisma.ApplicationUpdateOneRequiredWithoutHistoriesNestedInput
}

export type ApplicationHistoryUncheckedUpdateWithoutChangedByUserInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicationHistoryUncheckedUpdateManyWithoutChangedByUserInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  applicationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicationHistoryCreateManyApplicationInput = {
  historyId?: string
  changedByUserId?: string | null
  status: $Enums.ApplicationStatus
  comment?: string | null
  changeDate?: Date | string
}

export type ApplicationHistoryUpdateWithoutApplicationInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changedByUser?: Prisma.UserUpdateOneWithoutApplicationHistoriesNestedInput
}

export type ApplicationHistoryUncheckedUpdateWithoutApplicationInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  changedByUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicationHistoryUncheckedUpdateManyWithoutApplicationInput = {
  historyId?: Prisma.StringFieldUpdateOperationsInput | string
  changedByUserId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  changeDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ApplicationHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  historyId?: boolean
  applicationId?: boolean
  changedByUserId?: boolean
  status?: boolean
  comment?: boolean
  changeDate?: boolean
  application?: boolean | Prisma.ApplicationDefaultArgs<ExtArgs>
  changedByUser?: boolean | Prisma.ApplicationHistory$changedByUserArgs<ExtArgs>
}, ExtArgs["result"]["applicationHistory"]>

export type ApplicationHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  historyId?: boolean
  applicationId?: boolean
  changedByUserId?: boolean
  status?: boolean
  comment?: boolean
  changeDate?: boolean
  application?: boolean | Prisma.ApplicationDefaultArgs<ExtArgs>
  changedByUser?: boolean | Prisma.ApplicationHistory$changedByUserArgs<ExtArgs>
}, ExtArgs["result"]["applicationHistory"]>

export type ApplicationHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  historyId?: boolean
  applicationId?: boolean
  changedByUserId?: boolean
  status?: boolean
  comment?: boolean
  changeDate?: boolean
  application?: boolean | Prisma.ApplicationDefaultArgs<ExtArgs>
  changedByUser?: boolean | Prisma.ApplicationHistory$changedByUserArgs<ExtArgs>
}, ExtArgs["result"]["applicationHistory"]>

export type ApplicationHistorySelectScalar = {
  historyId?: boolean
  applicationId?: boolean
  changedByUserId?: boolean
  status?: boolean
  comment?: boolean
  changeDate?: boolean
}

export type ApplicationHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"historyId" | "applicationId" | "changedByUserId" | "status" | "comment" | "changeDate", ExtArgs["result"]["applicationHistory"]>
export type ApplicationHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  application?: boolean | Prisma.ApplicationDefaultArgs<ExtArgs>
  changedByUser?: boolean | Prisma.ApplicationHistory$changedByUserArgs<ExtArgs>
}
export type ApplicationHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  application?: boolean | Prisma.ApplicationDefaultArgs<ExtArgs>
  changedByUser?: boolean | Prisma.ApplicationHistory$changedByUserArgs<ExtArgs>
}
export type ApplicationHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  application?: boolean | Prisma.ApplicationDefaultArgs<ExtArgs>
  changedByUser?: boolean | Prisma.ApplicationHistory$changedByUserArgs<ExtArgs>
}

export type $ApplicationHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ApplicationHistory"
  objects: {
    application: Prisma.$ApplicationPayload<ExtArgs>
    changedByUser: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    historyId: string
    applicationId: string
    changedByUserId: string | null
    status: $Enums.ApplicationStatus
    comment: string | null
    changeDate: Date
  }, ExtArgs["result"]["applicationHistory"]>
  composites: {}
}

export type ApplicationHistoryGetPayload<S extends boolean | null | undefined | ApplicationHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload, S>

export type ApplicationHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ApplicationHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ApplicationHistoryCountAggregateInputType | true
  }

export interface ApplicationHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicationHistory'], meta: { name: 'ApplicationHistory' } }
  /**
   * Find zero or one ApplicationHistory that matches the filter.
   * @param {ApplicationHistoryFindUniqueArgs} args - Arguments to find a ApplicationHistory
   * @example
   * // Get one ApplicationHistory
   * const applicationHistory = await prisma.applicationHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ApplicationHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, ApplicationHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ApplicationHistoryClient<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ApplicationHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ApplicationHistoryFindUniqueOrThrowArgs} args - Arguments to find a ApplicationHistory
   * @example
   * // Get one ApplicationHistory
   * const applicationHistory = await prisma.applicationHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ApplicationHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ApplicationHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApplicationHistoryClient<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ApplicationHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationHistoryFindFirstArgs} args - Arguments to find a ApplicationHistory
   * @example
   * // Get one ApplicationHistory
   * const applicationHistory = await prisma.applicationHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ApplicationHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, ApplicationHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__ApplicationHistoryClient<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ApplicationHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationHistoryFindFirstOrThrowArgs} args - Arguments to find a ApplicationHistory
   * @example
   * // Get one ApplicationHistory
   * const applicationHistory = await prisma.applicationHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ApplicationHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ApplicationHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApplicationHistoryClient<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ApplicationHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ApplicationHistories
   * const applicationHistories = await prisma.applicationHistory.findMany()
   * 
   * // Get first 10 ApplicationHistories
   * const applicationHistories = await prisma.applicationHistory.findMany({ take: 10 })
   * 
   * // Only select the `historyId`
   * const applicationHistoryWithHistoryIdOnly = await prisma.applicationHistory.findMany({ select: { historyId: true } })
   * 
   */
  findMany<T extends ApplicationHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, ApplicationHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ApplicationHistory.
   * @param {ApplicationHistoryCreateArgs} args - Arguments to create a ApplicationHistory.
   * @example
   * // Create one ApplicationHistory
   * const ApplicationHistory = await prisma.applicationHistory.create({
   *   data: {
   *     // ... data to create a ApplicationHistory
   *   }
   * })
   * 
   */
  create<T extends ApplicationHistoryCreateArgs>(args: Prisma.SelectSubset<T, ApplicationHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__ApplicationHistoryClient<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ApplicationHistories.
   * @param {ApplicationHistoryCreateManyArgs} args - Arguments to create many ApplicationHistories.
   * @example
   * // Create many ApplicationHistories
   * const applicationHistory = await prisma.applicationHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ApplicationHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, ApplicationHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ApplicationHistories and returns the data saved in the database.
   * @param {ApplicationHistoryCreateManyAndReturnArgs} args - Arguments to create many ApplicationHistories.
   * @example
   * // Create many ApplicationHistories
   * const applicationHistory = await prisma.applicationHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ApplicationHistories and only return the `historyId`
   * const applicationHistoryWithHistoryIdOnly = await prisma.applicationHistory.createManyAndReturn({
   *   select: { historyId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ApplicationHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ApplicationHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ApplicationHistory.
   * @param {ApplicationHistoryDeleteArgs} args - Arguments to delete one ApplicationHistory.
   * @example
   * // Delete one ApplicationHistory
   * const ApplicationHistory = await prisma.applicationHistory.delete({
   *   where: {
   *     // ... filter to delete one ApplicationHistory
   *   }
   * })
   * 
   */
  delete<T extends ApplicationHistoryDeleteArgs>(args: Prisma.SelectSubset<T, ApplicationHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__ApplicationHistoryClient<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ApplicationHistory.
   * @param {ApplicationHistoryUpdateArgs} args - Arguments to update one ApplicationHistory.
   * @example
   * // Update one ApplicationHistory
   * const applicationHistory = await prisma.applicationHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ApplicationHistoryUpdateArgs>(args: Prisma.SelectSubset<T, ApplicationHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__ApplicationHistoryClient<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ApplicationHistories.
   * @param {ApplicationHistoryDeleteManyArgs} args - Arguments to filter ApplicationHistories to delete.
   * @example
   * // Delete a few ApplicationHistories
   * const { count } = await prisma.applicationHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ApplicationHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, ApplicationHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ApplicationHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ApplicationHistories
   * const applicationHistory = await prisma.applicationHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ApplicationHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, ApplicationHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ApplicationHistories and returns the data updated in the database.
   * @param {ApplicationHistoryUpdateManyAndReturnArgs} args - Arguments to update many ApplicationHistories.
   * @example
   * // Update many ApplicationHistories
   * const applicationHistory = await prisma.applicationHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ApplicationHistories and only return the `historyId`
   * const applicationHistoryWithHistoryIdOnly = await prisma.applicationHistory.updateManyAndReturn({
   *   select: { historyId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ApplicationHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ApplicationHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ApplicationHistory.
   * @param {ApplicationHistoryUpsertArgs} args - Arguments to update or create a ApplicationHistory.
   * @example
   * // Update or create a ApplicationHistory
   * const applicationHistory = await prisma.applicationHistory.upsert({
   *   create: {
   *     // ... data to create a ApplicationHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ApplicationHistory we want to update
   *   }
   * })
   */
  upsert<T extends ApplicationHistoryUpsertArgs>(args: Prisma.SelectSubset<T, ApplicationHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__ApplicationHistoryClient<runtime.Types.Result.GetResult<Prisma.$ApplicationHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ApplicationHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationHistoryCountArgs} args - Arguments to filter ApplicationHistories to count.
   * @example
   * // Count the number of ApplicationHistories
   * const count = await prisma.applicationHistory.count({
   *   where: {
   *     // ... the filter for the ApplicationHistories we want to count
   *   }
   * })
  **/
  count<T extends ApplicationHistoryCountArgs>(
    args?: Prisma.Subset<T, ApplicationHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ApplicationHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ApplicationHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ApplicationHistoryAggregateArgs>(args: Prisma.Subset<T, ApplicationHistoryAggregateArgs>): Prisma.PrismaPromise<GetApplicationHistoryAggregateType<T>>

  /**
   * Group by ApplicationHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicationHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ApplicationHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ApplicationHistoryGroupByArgs['orderBy'] }
      : { orderBy?: ApplicationHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ApplicationHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ApplicationHistory model
 */
readonly fields: ApplicationHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ApplicationHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ApplicationHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  application<T extends Prisma.ApplicationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApplicationDefaultArgs<ExtArgs>>): Prisma.Prisma__ApplicationClient<runtime.Types.Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  changedByUser<T extends Prisma.ApplicationHistory$changedByUserArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApplicationHistory$changedByUserArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ApplicationHistory model
 */
export interface ApplicationHistoryFieldRefs {
  readonly historyId: Prisma.FieldRef<"ApplicationHistory", 'String'>
  readonly applicationId: Prisma.FieldRef<"ApplicationHistory", 'String'>
  readonly changedByUserId: Prisma.FieldRef<"ApplicationHistory", 'String'>
  readonly status: Prisma.FieldRef<"ApplicationHistory", 'ApplicationStatus'>
  readonly comment: Prisma.FieldRef<"ApplicationHistory", 'String'>
  readonly changeDate: Prisma.FieldRef<"ApplicationHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ApplicationHistory findUnique
 */
export type ApplicationHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ApplicationHistory to fetch.
   */
  where: Prisma.ApplicationHistoryWhereUniqueInput
}

/**
 * ApplicationHistory findUniqueOrThrow
 */
export type ApplicationHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ApplicationHistory to fetch.
   */
  where: Prisma.ApplicationHistoryWhereUniqueInput
}

/**
 * ApplicationHistory findFirst
 */
export type ApplicationHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ApplicationHistory to fetch.
   */
  where?: Prisma.ApplicationHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApplicationHistories to fetch.
   */
  orderBy?: Prisma.ApplicationHistoryOrderByWithRelationInput | Prisma.ApplicationHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ApplicationHistories.
   */
  cursor?: Prisma.ApplicationHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApplicationHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApplicationHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ApplicationHistories.
   */
  distinct?: Prisma.ApplicationHistoryScalarFieldEnum | Prisma.ApplicationHistoryScalarFieldEnum[]
}

/**
 * ApplicationHistory findFirstOrThrow
 */
export type ApplicationHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ApplicationHistory to fetch.
   */
  where?: Prisma.ApplicationHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApplicationHistories to fetch.
   */
  orderBy?: Prisma.ApplicationHistoryOrderByWithRelationInput | Prisma.ApplicationHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ApplicationHistories.
   */
  cursor?: Prisma.ApplicationHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApplicationHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApplicationHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ApplicationHistories.
   */
  distinct?: Prisma.ApplicationHistoryScalarFieldEnum | Prisma.ApplicationHistoryScalarFieldEnum[]
}

/**
 * ApplicationHistory findMany
 */
export type ApplicationHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  /**
   * Filter, which ApplicationHistories to fetch.
   */
  where?: Prisma.ApplicationHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApplicationHistories to fetch.
   */
  orderBy?: Prisma.ApplicationHistoryOrderByWithRelationInput | Prisma.ApplicationHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ApplicationHistories.
   */
  cursor?: Prisma.ApplicationHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApplicationHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApplicationHistories.
   */
  skip?: number
  distinct?: Prisma.ApplicationHistoryScalarFieldEnum | Prisma.ApplicationHistoryScalarFieldEnum[]
}

/**
 * ApplicationHistory create
 */
export type ApplicationHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a ApplicationHistory.
   */
  data: Prisma.XOR<Prisma.ApplicationHistoryCreateInput, Prisma.ApplicationHistoryUncheckedCreateInput>
}

/**
 * ApplicationHistory createMany
 */
export type ApplicationHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ApplicationHistories.
   */
  data: Prisma.ApplicationHistoryCreateManyInput | Prisma.ApplicationHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ApplicationHistory createManyAndReturn
 */
export type ApplicationHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many ApplicationHistories.
   */
  data: Prisma.ApplicationHistoryCreateManyInput | Prisma.ApplicationHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ApplicationHistory update
 */
export type ApplicationHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a ApplicationHistory.
   */
  data: Prisma.XOR<Prisma.ApplicationHistoryUpdateInput, Prisma.ApplicationHistoryUncheckedUpdateInput>
  /**
   * Choose, which ApplicationHistory to update.
   */
  where: Prisma.ApplicationHistoryWhereUniqueInput
}

/**
 * ApplicationHistory updateMany
 */
export type ApplicationHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ApplicationHistories.
   */
  data: Prisma.XOR<Prisma.ApplicationHistoryUpdateManyMutationInput, Prisma.ApplicationHistoryUncheckedUpdateManyInput>
  /**
   * Filter which ApplicationHistories to update
   */
  where?: Prisma.ApplicationHistoryWhereInput
  /**
   * Limit how many ApplicationHistories to update.
   */
  limit?: number
}

/**
 * ApplicationHistory updateManyAndReturn
 */
export type ApplicationHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * The data used to update ApplicationHistories.
   */
  data: Prisma.XOR<Prisma.ApplicationHistoryUpdateManyMutationInput, Prisma.ApplicationHistoryUncheckedUpdateManyInput>
  /**
   * Filter which ApplicationHistories to update
   */
  where?: Prisma.ApplicationHistoryWhereInput
  /**
   * Limit how many ApplicationHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ApplicationHistory upsert
 */
export type ApplicationHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the ApplicationHistory to update in case it exists.
   */
  where: Prisma.ApplicationHistoryWhereUniqueInput
  /**
   * In case the ApplicationHistory found by the `where` argument doesn't exist, create a new ApplicationHistory with this data.
   */
  create: Prisma.XOR<Prisma.ApplicationHistoryCreateInput, Prisma.ApplicationHistoryUncheckedCreateInput>
  /**
   * In case the ApplicationHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ApplicationHistoryUpdateInput, Prisma.ApplicationHistoryUncheckedUpdateInput>
}

/**
 * ApplicationHistory delete
 */
export type ApplicationHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
  /**
   * Filter which ApplicationHistory to delete.
   */
  where: Prisma.ApplicationHistoryWhereUniqueInput
}

/**
 * ApplicationHistory deleteMany
 */
export type ApplicationHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ApplicationHistories to delete
   */
  where?: Prisma.ApplicationHistoryWhereInput
  /**
   * Limit how many ApplicationHistories to delete.
   */
  limit?: number
}

/**
 * ApplicationHistory.changedByUser
 */
export type ApplicationHistory$changedByUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * ApplicationHistory without action
 */
export type ApplicationHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicationHistory
   */
  select?: Prisma.ApplicationHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicationHistory
   */
  omit?: Prisma.ApplicationHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicationHistoryInclude<ExtArgs> | null
}
