
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Client` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Client
 * 
 */
export type ClientModel = runtime.Types.Result.DefaultSelection<Prisma.$ClientPayload>

export type AggregateClient = {
  _count: ClientCountAggregateOutputType | null
  _min: ClientMinAggregateOutputType | null
  _max: ClientMaxAggregateOutputType | null
}

export type ClientMinAggregateOutputType = {
  clientId: string | null
  organizationId: string | null
  parentClientId: string | null
  name: string | null
  contactPerson: string | null
  email: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ClientMaxAggregateOutputType = {
  clientId: string | null
  organizationId: string | null
  parentClientId: string | null
  name: string | null
  contactPerson: string | null
  email: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ClientCountAggregateOutputType = {
  clientId: number
  organizationId: number
  parentClientId: number
  name: number
  contactPerson: number
  email: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ClientMinAggregateInputType = {
  clientId?: true
  organizationId?: true
  parentClientId?: true
  name?: true
  contactPerson?: true
  email?: true
  createdAt?: true
  updatedAt?: true
}

export type ClientMaxAggregateInputType = {
  clientId?: true
  organizationId?: true
  parentClientId?: true
  name?: true
  contactPerson?: true
  email?: true
  createdAt?: true
  updatedAt?: true
}

export type ClientCountAggregateInputType = {
  clientId?: true
  organizationId?: true
  parentClientId?: true
  name?: true
  contactPerson?: true
  email?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ClientAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Client to aggregate.
   */
  where?: Prisma.ClientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clients to fetch.
   */
  orderBy?: Prisma.ClientOrderByWithRelationInput | Prisma.ClientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ClientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clients.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Clients
  **/
  _count?: true | ClientCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ClientMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ClientMaxAggregateInputType
}

export type GetClientAggregateType<T extends ClientAggregateArgs> = {
      [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClient[P]>
    : Prisma.GetScalarType<T[P], AggregateClient[P]>
}




export type ClientGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClientWhereInput
  orderBy?: Prisma.ClientOrderByWithAggregationInput | Prisma.ClientOrderByWithAggregationInput[]
  by: Prisma.ClientScalarFieldEnum[] | Prisma.ClientScalarFieldEnum
  having?: Prisma.ClientScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ClientCountAggregateInputType | true
  _min?: ClientMinAggregateInputType
  _max?: ClientMaxAggregateInputType
}

export type ClientGroupByOutputType = {
  clientId: string
  organizationId: string
  parentClientId: string | null
  name: string
  contactPerson: string | null
  email: string | null
  createdAt: Date
  updatedAt: Date
  _count: ClientCountAggregateOutputType | null
  _min: ClientMinAggregateOutputType | null
  _max: ClientMaxAggregateOutputType | null
}

type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ClientGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClientGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClientGroupByOutputType[P]>
      }
    >
  >



export type ClientWhereInput = {
  AND?: Prisma.ClientWhereInput | Prisma.ClientWhereInput[]
  OR?: Prisma.ClientWhereInput[]
  NOT?: Prisma.ClientWhereInput | Prisma.ClientWhereInput[]
  clientId?: Prisma.UuidFilter<"Client"> | string
  organizationId?: Prisma.UuidFilter<"Client"> | string
  parentClientId?: Prisma.UuidNullableFilter<"Client"> | string | null
  name?: Prisma.StringFilter<"Client"> | string
  contactPerson?: Prisma.StringNullableFilter<"Client"> | string | null
  email?: Prisma.StringNullableFilter<"Client"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Client"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Client"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  parent?: Prisma.XOR<Prisma.ClientNullableScalarRelationFilter, Prisma.ClientWhereInput> | null
  children?: Prisma.ClientListRelationFilter
  users?: Prisma.UserListRelationFilter
  userClientRoles?: Prisma.UserClientRoleListRelationFilter
}

export type ClientOrderByWithRelationInput = {
  clientId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentClientId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  parent?: Prisma.ClientOrderByWithRelationInput
  children?: Prisma.ClientOrderByRelationAggregateInput
  users?: Prisma.UserOrderByRelationAggregateInput
  userClientRoles?: Prisma.UserClientRoleOrderByRelationAggregateInput
}

export type ClientWhereUniqueInput = Prisma.AtLeast<{
  clientId?: string
  AND?: Prisma.ClientWhereInput | Prisma.ClientWhereInput[]
  OR?: Prisma.ClientWhereInput[]
  NOT?: Prisma.ClientWhereInput | Prisma.ClientWhereInput[]
  organizationId?: Prisma.UuidFilter<"Client"> | string
  parentClientId?: Prisma.UuidNullableFilter<"Client"> | string | null
  name?: Prisma.StringFilter<"Client"> | string
  contactPerson?: Prisma.StringNullableFilter<"Client"> | string | null
  email?: Prisma.StringNullableFilter<"Client"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Client"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Client"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  parent?: Prisma.XOR<Prisma.ClientNullableScalarRelationFilter, Prisma.ClientWhereInput> | null
  children?: Prisma.ClientListRelationFilter
  users?: Prisma.UserListRelationFilter
  userClientRoles?: Prisma.UserClientRoleListRelationFilter
}, "clientId">

export type ClientOrderByWithAggregationInput = {
  clientId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentClientId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ClientCountOrderByAggregateInput
  _max?: Prisma.ClientMaxOrderByAggregateInput
  _min?: Prisma.ClientMinOrderByAggregateInput
}

export type ClientScalarWhereWithAggregatesInput = {
  AND?: Prisma.ClientScalarWhereWithAggregatesInput | Prisma.ClientScalarWhereWithAggregatesInput[]
  OR?: Prisma.ClientScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ClientScalarWhereWithAggregatesInput | Prisma.ClientScalarWhereWithAggregatesInput[]
  clientId?: Prisma.UuidWithAggregatesFilter<"Client"> | string
  organizationId?: Prisma.UuidWithAggregatesFilter<"Client"> | string
  parentClientId?: Prisma.UuidNullableWithAggregatesFilter<"Client"> | string | null
  name?: Prisma.StringWithAggregatesFilter<"Client"> | string
  contactPerson?: Prisma.StringNullableWithAggregatesFilter<"Client"> | string | null
  email?: Prisma.StringNullableWithAggregatesFilter<"Client"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Client"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Client"> | Date | string
}

export type ClientCreateInput = {
  clientId?: string
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutClientsInput
  parent?: Prisma.ClientCreateNestedOneWithoutChildrenInput
  children?: Prisma.ClientCreateNestedManyWithoutParentInput
  users?: Prisma.UserCreateNestedManyWithoutClientInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutClientInput
}

export type ClientUncheckedCreateInput = {
  clientId?: string
  organizationId: string
  parentClientId?: string | null
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.ClientUncheckedCreateNestedManyWithoutParentInput
  users?: Prisma.UserUncheckedCreateNestedManyWithoutClientInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutClientInput
}

export type ClientUpdateInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutClientsNestedInput
  parent?: Prisma.ClientUpdateOneWithoutChildrenNestedInput
  children?: Prisma.ClientUpdateManyWithoutParentNestedInput
  users?: Prisma.UserUpdateManyWithoutClientNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutClientNestedInput
}

export type ClientUncheckedUpdateInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentClientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.ClientUncheckedUpdateManyWithoutParentNestedInput
  users?: Prisma.UserUncheckedUpdateManyWithoutClientNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutClientNestedInput
}

export type ClientCreateManyInput = {
  clientId?: string
  organizationId: string
  parentClientId?: string | null
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClientUpdateManyMutationInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClientUncheckedUpdateManyInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentClientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClientListRelationFilter = {
  every?: Prisma.ClientWhereInput
  some?: Prisma.ClientWhereInput
  none?: Prisma.ClientWhereInput
}

export type ClientOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ClientNullableScalarRelationFilter = {
  is?: Prisma.ClientWhereInput | null
  isNot?: Prisma.ClientWhereInput | null
}

export type ClientCountOrderByAggregateInput = {
  clientId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentClientId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClientMaxOrderByAggregateInput = {
  clientId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentClientId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClientMinOrderByAggregateInput = {
  clientId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentClientId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClientScalarRelationFilter = {
  is?: Prisma.ClientWhereInput
  isNot?: Prisma.ClientWhereInput
}

export type ClientCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutOrganizationInput, Prisma.ClientUncheckedCreateWithoutOrganizationInput> | Prisma.ClientCreateWithoutOrganizationInput[] | Prisma.ClientUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutOrganizationInput | Prisma.ClientCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ClientCreateManyOrganizationInputEnvelope
  connect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
}

export type ClientUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutOrganizationInput, Prisma.ClientUncheckedCreateWithoutOrganizationInput> | Prisma.ClientCreateWithoutOrganizationInput[] | Prisma.ClientUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutOrganizationInput | Prisma.ClientCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ClientCreateManyOrganizationInputEnvelope
  connect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
}

export type ClientUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutOrganizationInput, Prisma.ClientUncheckedCreateWithoutOrganizationInput> | Prisma.ClientCreateWithoutOrganizationInput[] | Prisma.ClientUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutOrganizationInput | Prisma.ClientCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ClientUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ClientUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ClientCreateManyOrganizationInputEnvelope
  set?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  disconnect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  delete?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  connect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  update?: Prisma.ClientUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ClientUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ClientUpdateManyWithWhereWithoutOrganizationInput | Prisma.ClientUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ClientScalarWhereInput | Prisma.ClientScalarWhereInput[]
}

export type ClientUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutOrganizationInput, Prisma.ClientUncheckedCreateWithoutOrganizationInput> | Prisma.ClientCreateWithoutOrganizationInput[] | Prisma.ClientUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutOrganizationInput | Prisma.ClientCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ClientUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ClientUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ClientCreateManyOrganizationInputEnvelope
  set?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  disconnect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  delete?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  connect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  update?: Prisma.ClientUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ClientUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ClientUpdateManyWithWhereWithoutOrganizationInput | Prisma.ClientUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ClientScalarWhereInput | Prisma.ClientScalarWhereInput[]
}

export type ClientCreateNestedOneWithoutChildrenInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutChildrenInput, Prisma.ClientUncheckedCreateWithoutChildrenInput>
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutChildrenInput
  connect?: Prisma.ClientWhereUniqueInput
}

export type ClientCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutParentInput, Prisma.ClientUncheckedCreateWithoutParentInput> | Prisma.ClientCreateWithoutParentInput[] | Prisma.ClientUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutParentInput | Prisma.ClientCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.ClientCreateManyParentInputEnvelope
  connect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
}

export type ClientUncheckedCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutParentInput, Prisma.ClientUncheckedCreateWithoutParentInput> | Prisma.ClientCreateWithoutParentInput[] | Prisma.ClientUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutParentInput | Prisma.ClientCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.ClientCreateManyParentInputEnvelope
  connect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
}

export type ClientUpdateOneWithoutChildrenNestedInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutChildrenInput, Prisma.ClientUncheckedCreateWithoutChildrenInput>
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutChildrenInput
  upsert?: Prisma.ClientUpsertWithoutChildrenInput
  disconnect?: Prisma.ClientWhereInput | boolean
  delete?: Prisma.ClientWhereInput | boolean
  connect?: Prisma.ClientWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ClientUpdateToOneWithWhereWithoutChildrenInput, Prisma.ClientUpdateWithoutChildrenInput>, Prisma.ClientUncheckedUpdateWithoutChildrenInput>
}

export type ClientUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutParentInput, Prisma.ClientUncheckedCreateWithoutParentInput> | Prisma.ClientCreateWithoutParentInput[] | Prisma.ClientUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutParentInput | Prisma.ClientCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.ClientUpsertWithWhereUniqueWithoutParentInput | Prisma.ClientUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.ClientCreateManyParentInputEnvelope
  set?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  disconnect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  delete?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  connect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  update?: Prisma.ClientUpdateWithWhereUniqueWithoutParentInput | Prisma.ClientUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.ClientUpdateManyWithWhereWithoutParentInput | Prisma.ClientUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.ClientScalarWhereInput | Prisma.ClientScalarWhereInput[]
}

export type ClientUncheckedUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutParentInput, Prisma.ClientUncheckedCreateWithoutParentInput> | Prisma.ClientCreateWithoutParentInput[] | Prisma.ClientUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutParentInput | Prisma.ClientCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.ClientUpsertWithWhereUniqueWithoutParentInput | Prisma.ClientUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.ClientCreateManyParentInputEnvelope
  set?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  disconnect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  delete?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  connect?: Prisma.ClientWhereUniqueInput | Prisma.ClientWhereUniqueInput[]
  update?: Prisma.ClientUpdateWithWhereUniqueWithoutParentInput | Prisma.ClientUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.ClientUpdateManyWithWhereWithoutParentInput | Prisma.ClientUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.ClientScalarWhereInput | Prisma.ClientScalarWhereInput[]
}

export type ClientCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutUsersInput, Prisma.ClientUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutUsersInput
  connect?: Prisma.ClientWhereUniqueInput
}

export type ClientUpdateOneRequiredWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutUsersInput, Prisma.ClientUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutUsersInput
  upsert?: Prisma.ClientUpsertWithoutUsersInput
  connect?: Prisma.ClientWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ClientUpdateToOneWithWhereWithoutUsersInput, Prisma.ClientUpdateWithoutUsersInput>, Prisma.ClientUncheckedUpdateWithoutUsersInput>
}

export type ClientCreateNestedOneWithoutUserClientRolesInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutUserClientRolesInput, Prisma.ClientUncheckedCreateWithoutUserClientRolesInput>
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutUserClientRolesInput
  connect?: Prisma.ClientWhereUniqueInput
}

export type ClientUpdateOneRequiredWithoutUserClientRolesNestedInput = {
  create?: Prisma.XOR<Prisma.ClientCreateWithoutUserClientRolesInput, Prisma.ClientUncheckedCreateWithoutUserClientRolesInput>
  connectOrCreate?: Prisma.ClientCreateOrConnectWithoutUserClientRolesInput
  upsert?: Prisma.ClientUpsertWithoutUserClientRolesInput
  connect?: Prisma.ClientWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ClientUpdateToOneWithWhereWithoutUserClientRolesInput, Prisma.ClientUpdateWithoutUserClientRolesInput>, Prisma.ClientUncheckedUpdateWithoutUserClientRolesInput>
}

export type ClientCreateWithoutOrganizationInput = {
  clientId?: string
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  parent?: Prisma.ClientCreateNestedOneWithoutChildrenInput
  children?: Prisma.ClientCreateNestedManyWithoutParentInput
  users?: Prisma.UserCreateNestedManyWithoutClientInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutClientInput
}

export type ClientUncheckedCreateWithoutOrganizationInput = {
  clientId?: string
  parentClientId?: string | null
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.ClientUncheckedCreateNestedManyWithoutParentInput
  users?: Prisma.UserUncheckedCreateNestedManyWithoutClientInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutClientInput
}

export type ClientCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.ClientWhereUniqueInput
  create: Prisma.XOR<Prisma.ClientCreateWithoutOrganizationInput, Prisma.ClientUncheckedCreateWithoutOrganizationInput>
}

export type ClientCreateManyOrganizationInputEnvelope = {
  data: Prisma.ClientCreateManyOrganizationInput | Prisma.ClientCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type ClientUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ClientWhereUniqueInput
  update: Prisma.XOR<Prisma.ClientUpdateWithoutOrganizationInput, Prisma.ClientUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.ClientCreateWithoutOrganizationInput, Prisma.ClientUncheckedCreateWithoutOrganizationInput>
}

export type ClientUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ClientWhereUniqueInput
  data: Prisma.XOR<Prisma.ClientUpdateWithoutOrganizationInput, Prisma.ClientUncheckedUpdateWithoutOrganizationInput>
}

export type ClientUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.ClientScalarWhereInput
  data: Prisma.XOR<Prisma.ClientUpdateManyMutationInput, Prisma.ClientUncheckedUpdateManyWithoutOrganizationInput>
}

export type ClientScalarWhereInput = {
  AND?: Prisma.ClientScalarWhereInput | Prisma.ClientScalarWhereInput[]
  OR?: Prisma.ClientScalarWhereInput[]
  NOT?: Prisma.ClientScalarWhereInput | Prisma.ClientScalarWhereInput[]
  clientId?: Prisma.UuidFilter<"Client"> | string
  organizationId?: Prisma.UuidFilter<"Client"> | string
  parentClientId?: Prisma.UuidNullableFilter<"Client"> | string | null
  name?: Prisma.StringFilter<"Client"> | string
  contactPerson?: Prisma.StringNullableFilter<"Client"> | string | null
  email?: Prisma.StringNullableFilter<"Client"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Client"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Client"> | Date | string
}

export type ClientCreateWithoutChildrenInput = {
  clientId?: string
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutClientsInput
  parent?: Prisma.ClientCreateNestedOneWithoutChildrenInput
  users?: Prisma.UserCreateNestedManyWithoutClientInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutClientInput
}

export type ClientUncheckedCreateWithoutChildrenInput = {
  clientId?: string
  organizationId: string
  parentClientId?: string | null
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  users?: Prisma.UserUncheckedCreateNestedManyWithoutClientInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutClientInput
}

export type ClientCreateOrConnectWithoutChildrenInput = {
  where: Prisma.ClientWhereUniqueInput
  create: Prisma.XOR<Prisma.ClientCreateWithoutChildrenInput, Prisma.ClientUncheckedCreateWithoutChildrenInput>
}

export type ClientCreateWithoutParentInput = {
  clientId?: string
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutClientsInput
  children?: Prisma.ClientCreateNestedManyWithoutParentInput
  users?: Prisma.UserCreateNestedManyWithoutClientInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutClientInput
}

export type ClientUncheckedCreateWithoutParentInput = {
  clientId?: string
  organizationId: string
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.ClientUncheckedCreateNestedManyWithoutParentInput
  users?: Prisma.UserUncheckedCreateNestedManyWithoutClientInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutClientInput
}

export type ClientCreateOrConnectWithoutParentInput = {
  where: Prisma.ClientWhereUniqueInput
  create: Prisma.XOR<Prisma.ClientCreateWithoutParentInput, Prisma.ClientUncheckedCreateWithoutParentInput>
}

export type ClientCreateManyParentInputEnvelope = {
  data: Prisma.ClientCreateManyParentInput | Prisma.ClientCreateManyParentInput[]
  skipDuplicates?: boolean
}

export type ClientUpsertWithoutChildrenInput = {
  update: Prisma.XOR<Prisma.ClientUpdateWithoutChildrenInput, Prisma.ClientUncheckedUpdateWithoutChildrenInput>
  create: Prisma.XOR<Prisma.ClientCreateWithoutChildrenInput, Prisma.ClientUncheckedCreateWithoutChildrenInput>
  where?: Prisma.ClientWhereInput
}

export type ClientUpdateToOneWithWhereWithoutChildrenInput = {
  where?: Prisma.ClientWhereInput
  data: Prisma.XOR<Prisma.ClientUpdateWithoutChildrenInput, Prisma.ClientUncheckedUpdateWithoutChildrenInput>
}

export type ClientUpdateWithoutChildrenInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutClientsNestedInput
  parent?: Prisma.ClientUpdateOneWithoutChildrenNestedInput
  users?: Prisma.UserUpdateManyWithoutClientNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutClientNestedInput
}

export type ClientUncheckedUpdateWithoutChildrenInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentClientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  users?: Prisma.UserUncheckedUpdateManyWithoutClientNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutClientNestedInput
}

export type ClientUpsertWithWhereUniqueWithoutParentInput = {
  where: Prisma.ClientWhereUniqueInput
  update: Prisma.XOR<Prisma.ClientUpdateWithoutParentInput, Prisma.ClientUncheckedUpdateWithoutParentInput>
  create: Prisma.XOR<Prisma.ClientCreateWithoutParentInput, Prisma.ClientUncheckedCreateWithoutParentInput>
}

export type ClientUpdateWithWhereUniqueWithoutParentInput = {
  where: Prisma.ClientWhereUniqueInput
  data: Prisma.XOR<Prisma.ClientUpdateWithoutParentInput, Prisma.ClientUncheckedUpdateWithoutParentInput>
}

export type ClientUpdateManyWithWhereWithoutParentInput = {
  where: Prisma.ClientScalarWhereInput
  data: Prisma.XOR<Prisma.ClientUpdateManyMutationInput, Prisma.ClientUncheckedUpdateManyWithoutParentInput>
}

export type ClientCreateWithoutUsersInput = {
  clientId?: string
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutClientsInput
  parent?: Prisma.ClientCreateNestedOneWithoutChildrenInput
  children?: Prisma.ClientCreateNestedManyWithoutParentInput
  userClientRoles?: Prisma.UserClientRoleCreateNestedManyWithoutClientInput
}

export type ClientUncheckedCreateWithoutUsersInput = {
  clientId?: string
  organizationId: string
  parentClientId?: string | null
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.ClientUncheckedCreateNestedManyWithoutParentInput
  userClientRoles?: Prisma.UserClientRoleUncheckedCreateNestedManyWithoutClientInput
}

export type ClientCreateOrConnectWithoutUsersInput = {
  where: Prisma.ClientWhereUniqueInput
  create: Prisma.XOR<Prisma.ClientCreateWithoutUsersInput, Prisma.ClientUncheckedCreateWithoutUsersInput>
}

export type ClientUpsertWithoutUsersInput = {
  update: Prisma.XOR<Prisma.ClientUpdateWithoutUsersInput, Prisma.ClientUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.ClientCreateWithoutUsersInput, Prisma.ClientUncheckedCreateWithoutUsersInput>
  where?: Prisma.ClientWhereInput
}

export type ClientUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.ClientWhereInput
  data: Prisma.XOR<Prisma.ClientUpdateWithoutUsersInput, Prisma.ClientUncheckedUpdateWithoutUsersInput>
}

export type ClientUpdateWithoutUsersInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutClientsNestedInput
  parent?: Prisma.ClientUpdateOneWithoutChildrenNestedInput
  children?: Prisma.ClientUpdateManyWithoutParentNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutClientNestedInput
}

export type ClientUncheckedUpdateWithoutUsersInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentClientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.ClientUncheckedUpdateManyWithoutParentNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutClientNestedInput
}

export type ClientCreateWithoutUserClientRolesInput = {
  clientId?: string
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutClientsInput
  parent?: Prisma.ClientCreateNestedOneWithoutChildrenInput
  children?: Prisma.ClientCreateNestedManyWithoutParentInput
  users?: Prisma.UserCreateNestedManyWithoutClientInput
}

export type ClientUncheckedCreateWithoutUserClientRolesInput = {
  clientId?: string
  organizationId: string
  parentClientId?: string | null
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.ClientUncheckedCreateNestedManyWithoutParentInput
  users?: Prisma.UserUncheckedCreateNestedManyWithoutClientInput
}

export type ClientCreateOrConnectWithoutUserClientRolesInput = {
  where: Prisma.ClientWhereUniqueInput
  create: Prisma.XOR<Prisma.ClientCreateWithoutUserClientRolesInput, Prisma.ClientUncheckedCreateWithoutUserClientRolesInput>
}

export type ClientUpsertWithoutUserClientRolesInput = {
  update: Prisma.XOR<Prisma.ClientUpdateWithoutUserClientRolesInput, Prisma.ClientUncheckedUpdateWithoutUserClientRolesInput>
  create: Prisma.XOR<Prisma.ClientCreateWithoutUserClientRolesInput, Prisma.ClientUncheckedCreateWithoutUserClientRolesInput>
  where?: Prisma.ClientWhereInput
}

export type ClientUpdateToOneWithWhereWithoutUserClientRolesInput = {
  where?: Prisma.ClientWhereInput
  data: Prisma.XOR<Prisma.ClientUpdateWithoutUserClientRolesInput, Prisma.ClientUncheckedUpdateWithoutUserClientRolesInput>
}

export type ClientUpdateWithoutUserClientRolesInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutClientsNestedInput
  parent?: Prisma.ClientUpdateOneWithoutChildrenNestedInput
  children?: Prisma.ClientUpdateManyWithoutParentNestedInput
  users?: Prisma.UserUpdateManyWithoutClientNestedInput
}

export type ClientUncheckedUpdateWithoutUserClientRolesInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentClientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.ClientUncheckedUpdateManyWithoutParentNestedInput
  users?: Prisma.UserUncheckedUpdateManyWithoutClientNestedInput
}

export type ClientCreateManyOrganizationInput = {
  clientId?: string
  parentClientId?: string | null
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClientUpdateWithoutOrganizationInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  parent?: Prisma.ClientUpdateOneWithoutChildrenNestedInput
  children?: Prisma.ClientUpdateManyWithoutParentNestedInput
  users?: Prisma.UserUpdateManyWithoutClientNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutClientNestedInput
}

export type ClientUncheckedUpdateWithoutOrganizationInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  parentClientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.ClientUncheckedUpdateManyWithoutParentNestedInput
  users?: Prisma.UserUncheckedUpdateManyWithoutClientNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutClientNestedInput
}

export type ClientUncheckedUpdateManyWithoutOrganizationInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  parentClientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClientCreateManyParentInput = {
  clientId?: string
  organizationId: string
  name: string
  contactPerson?: string | null
  email?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClientUpdateWithoutParentInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutClientsNestedInput
  children?: Prisma.ClientUpdateManyWithoutParentNestedInput
  users?: Prisma.UserUpdateManyWithoutClientNestedInput
  userClientRoles?: Prisma.UserClientRoleUpdateManyWithoutClientNestedInput
}

export type ClientUncheckedUpdateWithoutParentInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.ClientUncheckedUpdateManyWithoutParentNestedInput
  users?: Prisma.UserUncheckedUpdateManyWithoutClientNestedInput
  userClientRoles?: Prisma.UserClientRoleUncheckedUpdateManyWithoutClientNestedInput
}

export type ClientUncheckedUpdateManyWithoutParentInput = {
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ClientCountOutputType
 */

export type ClientCountOutputType = {
  children: number
  users: number
  userClientRoles: number
}

export type ClientCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  children?: boolean | ClientCountOutputTypeCountChildrenArgs
  users?: boolean | ClientCountOutputTypeCountUsersArgs
  userClientRoles?: boolean | ClientCountOutputTypeCountUserClientRolesArgs
}

/**
 * ClientCountOutputType without action
 */
export type ClientCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientCountOutputType
   */
  select?: Prisma.ClientCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ClientCountOutputType without action
 */
export type ClientCountOutputTypeCountChildrenArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClientWhereInput
}

/**
 * ClientCountOutputType without action
 */
export type ClientCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}

/**
 * ClientCountOutputType without action
 */
export type ClientCountOutputTypeCountUserClientRolesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserClientRoleWhereInput
}


export type ClientSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  clientId?: boolean
  organizationId?: boolean
  parentClientId?: boolean
  name?: boolean
  contactPerson?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  parent?: boolean | Prisma.Client$parentArgs<ExtArgs>
  children?: boolean | Prisma.Client$childrenArgs<ExtArgs>
  users?: boolean | Prisma.Client$usersArgs<ExtArgs>
  userClientRoles?: boolean | Prisma.Client$userClientRolesArgs<ExtArgs>
  _count?: boolean | Prisma.ClientCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["client"]>

export type ClientSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  clientId?: boolean
  organizationId?: boolean
  parentClientId?: boolean
  name?: boolean
  contactPerson?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  parent?: boolean | Prisma.Client$parentArgs<ExtArgs>
}, ExtArgs["result"]["client"]>

export type ClientSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  clientId?: boolean
  organizationId?: boolean
  parentClientId?: boolean
  name?: boolean
  contactPerson?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  parent?: boolean | Prisma.Client$parentArgs<ExtArgs>
}, ExtArgs["result"]["client"]>

export type ClientSelectScalar = {
  clientId?: boolean
  organizationId?: boolean
  parentClientId?: boolean
  name?: boolean
  contactPerson?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ClientOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"clientId" | "organizationId" | "parentClientId" | "name" | "contactPerson" | "email" | "createdAt" | "updatedAt", ExtArgs["result"]["client"]>
export type ClientInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  parent?: boolean | Prisma.Client$parentArgs<ExtArgs>
  children?: boolean | Prisma.Client$childrenArgs<ExtArgs>
  users?: boolean | Prisma.Client$usersArgs<ExtArgs>
  userClientRoles?: boolean | Prisma.Client$userClientRolesArgs<ExtArgs>
  _count?: boolean | Prisma.ClientCountOutputTypeDefaultArgs<ExtArgs>
}
export type ClientIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  parent?: boolean | Prisma.Client$parentArgs<ExtArgs>
}
export type ClientIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  parent?: boolean | Prisma.Client$parentArgs<ExtArgs>
}

export type $ClientPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Client"
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    parent: Prisma.$ClientPayload<ExtArgs> | null
    children: Prisma.$ClientPayload<ExtArgs>[]
    users: Prisma.$UserPayload<ExtArgs>[]
    userClientRoles: Prisma.$UserClientRolePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    clientId: string
    organizationId: string
    parentClientId: string | null
    name: string
    contactPerson: string | null
    email: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["client"]>
  composites: {}
}

export type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ClientPayload, S>

export type ClientCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ClientCountAggregateInputType | true
  }

export interface ClientDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
  /**
   * Find zero or one Client that matches the filter.
   * @param {ClientFindUniqueArgs} args - Arguments to find a Client
   * @example
   * // Get one Client
   * const client = await prisma.client.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClientFindUniqueArgs>(args: Prisma.SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Client that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
   * @example
   * // Get one Client
   * const client = await prisma.client.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Client that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientFindFirstArgs} args - Arguments to find a Client
   * @example
   * // Get one Client
   * const client = await prisma.client.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClientFindFirstArgs>(args?: Prisma.SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Client that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
   * @example
   * // Get one Client
   * const client = await prisma.client.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Clients that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Clients
   * const clients = await prisma.client.findMany()
   * 
   * // Get first 10 Clients
   * const clients = await prisma.client.findMany({ take: 10 })
   * 
   * // Only select the `clientId`
   * const clientWithClientIdOnly = await prisma.client.findMany({ select: { clientId: true } })
   * 
   */
  findMany<T extends ClientFindManyArgs>(args?: Prisma.SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Client.
   * @param {ClientCreateArgs} args - Arguments to create a Client.
   * @example
   * // Create one Client
   * const Client = await prisma.client.create({
   *   data: {
   *     // ... data to create a Client
   *   }
   * })
   * 
   */
  create<T extends ClientCreateArgs>(args: Prisma.SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Clients.
   * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
   * @example
   * // Create many Clients
   * const client = await prisma.client.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ClientCreateManyArgs>(args?: Prisma.SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Clients and returns the data saved in the database.
   * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
   * @example
   * // Create many Clients
   * const client = await prisma.client.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Clients and only return the `clientId`
   * const clientWithClientIdOnly = await prisma.client.createManyAndReturn({
   *   select: { clientId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Client.
   * @param {ClientDeleteArgs} args - Arguments to delete one Client.
   * @example
   * // Delete one Client
   * const Client = await prisma.client.delete({
   *   where: {
   *     // ... filter to delete one Client
   *   }
   * })
   * 
   */
  delete<T extends ClientDeleteArgs>(args: Prisma.SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Client.
   * @param {ClientUpdateArgs} args - Arguments to update one Client.
   * @example
   * // Update one Client
   * const client = await prisma.client.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ClientUpdateArgs>(args: Prisma.SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Clients.
   * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
   * @example
   * // Delete a few Clients
   * const { count } = await prisma.client.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ClientDeleteManyArgs>(args?: Prisma.SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Clients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Clients
   * const client = await prisma.client.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ClientUpdateManyArgs>(args: Prisma.SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Clients and returns the data updated in the database.
   * @param {ClientUpdateManyAndReturnArgs} args - Arguments to update many Clients.
   * @example
   * // Update many Clients
   * const client = await prisma.client.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Clients and only return the `clientId`
   * const clientWithClientIdOnly = await prisma.client.updateManyAndReturn({
   *   select: { clientId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ClientUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ClientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Client.
   * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
   * @example
   * // Update or create a Client
   * const client = await prisma.client.upsert({
   *   create: {
   *     // ... data to create a Client
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Client we want to update
   *   }
   * })
   */
  upsert<T extends ClientUpsertArgs>(args: Prisma.SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Clients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientCountArgs} args - Arguments to filter Clients to count.
   * @example
   * // Count the number of Clients
   * const count = await prisma.client.count({
   *   where: {
   *     // ... the filter for the Clients we want to count
   *   }
   * })
  **/
  count<T extends ClientCountArgs>(
    args?: Prisma.Subset<T, ClientCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ClientCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Client.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ClientAggregateArgs>(args: Prisma.Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

  /**
   * Group by Client.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ClientGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClientGroupByArgs['orderBy'] }
      : { orderBy?: ClientGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Client model
 */
readonly fields: ClientFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Client.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClientClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  parent<T extends Prisma.Client$parentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Client$parentArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  children<T extends Prisma.Client$childrenArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Client$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  users<T extends Prisma.Client$usersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Client$usersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  userClientRoles<T extends Prisma.Client$userClientRolesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Client$userClientRolesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserClientRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Client model
 */
export interface ClientFieldRefs {
  readonly clientId: Prisma.FieldRef<"Client", 'String'>
  readonly organizationId: Prisma.FieldRef<"Client", 'String'>
  readonly parentClientId: Prisma.FieldRef<"Client", 'String'>
  readonly name: Prisma.FieldRef<"Client", 'String'>
  readonly contactPerson: Prisma.FieldRef<"Client", 'String'>
  readonly email: Prisma.FieldRef<"Client", 'String'>
  readonly createdAt: Prisma.FieldRef<"Client", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Client", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Client findUnique
 */
export type ClientFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  /**
   * Filter, which Client to fetch.
   */
  where: Prisma.ClientWhereUniqueInput
}

/**
 * Client findUniqueOrThrow
 */
export type ClientFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  /**
   * Filter, which Client to fetch.
   */
  where: Prisma.ClientWhereUniqueInput
}

/**
 * Client findFirst
 */
export type ClientFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  /**
   * Filter, which Client to fetch.
   */
  where?: Prisma.ClientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clients to fetch.
   */
  orderBy?: Prisma.ClientOrderByWithRelationInput | Prisma.ClientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Clients.
   */
  cursor?: Prisma.ClientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clients.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Clients.
   */
  distinct?: Prisma.ClientScalarFieldEnum | Prisma.ClientScalarFieldEnum[]
}

/**
 * Client findFirstOrThrow
 */
export type ClientFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  /**
   * Filter, which Client to fetch.
   */
  where?: Prisma.ClientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clients to fetch.
   */
  orderBy?: Prisma.ClientOrderByWithRelationInput | Prisma.ClientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Clients.
   */
  cursor?: Prisma.ClientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clients.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Clients.
   */
  distinct?: Prisma.ClientScalarFieldEnum | Prisma.ClientScalarFieldEnum[]
}

/**
 * Client findMany
 */
export type ClientFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  /**
   * Filter, which Clients to fetch.
   */
  where?: Prisma.ClientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clients to fetch.
   */
  orderBy?: Prisma.ClientOrderByWithRelationInput | Prisma.ClientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Clients.
   */
  cursor?: Prisma.ClientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clients.
   */
  skip?: number
  distinct?: Prisma.ClientScalarFieldEnum | Prisma.ClientScalarFieldEnum[]
}

/**
 * Client create
 */
export type ClientCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  /**
   * The data needed to create a Client.
   */
  data: Prisma.XOR<Prisma.ClientCreateInput, Prisma.ClientUncheckedCreateInput>
}

/**
 * Client createMany
 */
export type ClientCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Clients.
   */
  data: Prisma.ClientCreateManyInput | Prisma.ClientCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Client createManyAndReturn
 */
export type ClientCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * The data used to create many Clients.
   */
  data: Prisma.ClientCreateManyInput | Prisma.ClientCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Client update
 */
export type ClientUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  /**
   * The data needed to update a Client.
   */
  data: Prisma.XOR<Prisma.ClientUpdateInput, Prisma.ClientUncheckedUpdateInput>
  /**
   * Choose, which Client to update.
   */
  where: Prisma.ClientWhereUniqueInput
}

/**
 * Client updateMany
 */
export type ClientUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Clients.
   */
  data: Prisma.XOR<Prisma.ClientUpdateManyMutationInput, Prisma.ClientUncheckedUpdateManyInput>
  /**
   * Filter which Clients to update
   */
  where?: Prisma.ClientWhereInput
  /**
   * Limit how many Clients to update.
   */
  limit?: number
}

/**
 * Client updateManyAndReturn
 */
export type ClientUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * The data used to update Clients.
   */
  data: Prisma.XOR<Prisma.ClientUpdateManyMutationInput, Prisma.ClientUncheckedUpdateManyInput>
  /**
   * Filter which Clients to update
   */
  where?: Prisma.ClientWhereInput
  /**
   * Limit how many Clients to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Client upsert
 */
export type ClientUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  /**
   * The filter to search for the Client to update in case it exists.
   */
  where: Prisma.ClientWhereUniqueInput
  /**
   * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
   */
  create: Prisma.XOR<Prisma.ClientCreateInput, Prisma.ClientUncheckedCreateInput>
  /**
   * In case the Client was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ClientUpdateInput, Prisma.ClientUncheckedUpdateInput>
}

/**
 * Client delete
 */
export type ClientDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  /**
   * Filter which Client to delete.
   */
  where: Prisma.ClientWhereUniqueInput
}

/**
 * Client deleteMany
 */
export type ClientDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Clients to delete
   */
  where?: Prisma.ClientWhereInput
  /**
   * Limit how many Clients to delete.
   */
  limit?: number
}

/**
 * Client.parent
 */
export type Client$parentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  where?: Prisma.ClientWhereInput
}

/**
 * Client.children
 */
export type Client$childrenArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  where?: Prisma.ClientWhereInput
  orderBy?: Prisma.ClientOrderByWithRelationInput | Prisma.ClientOrderByWithRelationInput[]
  cursor?: Prisma.ClientWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ClientScalarFieldEnum | Prisma.ClientScalarFieldEnum[]
}

/**
 * Client.users
 */
export type Client$usersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * Client.userClientRoles
 */
export type Client$userClientRolesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserClientRole
   */
  select?: Prisma.UserClientRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserClientRole
   */
  omit?: Prisma.UserClientRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserClientRoleInclude<ExtArgs> | null
  where?: Prisma.UserClientRoleWhereInput
  orderBy?: Prisma.UserClientRoleOrderByWithRelationInput | Prisma.UserClientRoleOrderByWithRelationInput[]
  cursor?: Prisma.UserClientRoleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserClientRoleScalarFieldEnum | Prisma.UserClientRoleScalarFieldEnum[]
}

/**
 * Client without action
 */
export type ClientDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
}
