
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "./prismaNamespace"


const config: runtime.GetPrismaClientConfig = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client"
    },
    "output": {
      "value": "/workspace/main/packages/db/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "linux-arm64-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/workspace/main/packages/db/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.0",
  "engineVersion": "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider   = \"prisma-client\"\n  engineType = \"client\"\n  output     = \"../src/generated/prisma\"\n}\n\nenum TaskStatus {\n  PENDING\n  IN_PROGRESS\n  COMPLETED\n}\n\nenum ApplicationType {\n  LEAVE_REQUEST\n  EXPENSE_CLAIM\n  SYSTEM_ACCESS\n  OTHER\n}\n\nenum ApplicationStatus {\n  PENDING\n  APPROVED\n  REJECTED\n  CANCELED\n}\n\nmodel Tasks {\n  userId      String     @map(\"user_id\") @db.Uuid\n  taskId      String     @default(uuid()) @map(\"task_id\") @db.Uuid\n  content     String     @map(\"content\") @db.VarChar(1000)\n  status      TaskStatus @default(PENDING) @map(\"status\")\n  completedAt DateTime?  @map(\"completed_at\")\n  createdAt   DateTime   @map(\"created_at\")\n  updatedAt   DateTime   @map(\"updated_at\")\n\n  @@id([userId, taskId])\n  @@map(\"tasks\")\n}\n\n// ========================================\n// Organization Management\n// ========================================\n\nmodel Organization {\n  organizationId String   @id @default(uuid()) @map(\"organization_id\") @db.Uuid\n  name           String   @map(\"name\") @db.VarChar(255)\n  description    String?  @map(\"description\") @db.Text\n  createdAt      DateTime @default(now()) @map(\"created_at\")\n  updatedAt      DateTime @updatedAt @map(\"updated_at\")\n\n  clients Client[]\n\n  @@map(\"organizations\")\n}\n\nmodel Client {\n  clientId       String   @id @default(uuid()) @map(\"client_id\") @db.Uuid\n  organizationId String   @map(\"organization_id\") @db.Uuid\n  parentClientId String?  @map(\"parent_client_id\") @db.Uuid\n  name           String   @map(\"name\") @db.VarChar(255)\n  contactPerson  String?  @map(\"contact_person\") @db.VarChar(255)\n  email          String?  @map(\"email\") @db.VarChar(255)\n  createdAt      DateTime @default(now()) @map(\"created_at\")\n  updatedAt      DateTime @updatedAt @map(\"updated_at\")\n\n  organization Organization @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)\n  parent       Client?      @relation(\"ClientHierarchy\", fields: [parentClientId], references: [clientId], onDelete: Restrict)\n  children     Client[]     @relation(\"ClientHierarchy\")\n\n  users           User[]\n  userClientRoles UserClientRole[]\n\n  @@index([organizationId])\n  @@index([parentClientId])\n  @@index([email])\n  @@map(\"clients\")\n}\n\n// ========================================\n// User Management\n// ========================================\n\nmodel User {\n  userId       String   @id @default(uuid()) @map(\"user_id\") @db.Uuid\n  clientId     String   @map(\"client_id\") @db.Uuid\n  username     String   @unique @map(\"username\") @db.VarChar(100)\n  email        String   @unique @map(\"email\") @db.VarChar(255)\n  passwordHash String   @map(\"password_hash\") @db.VarChar(255)\n  createdAt    DateTime @default(now()) @map(\"created_at\")\n  updatedAt    DateTime @updatedAt @map(\"updated_at\")\n\n  client Client @relation(fields: [clientId], references: [clientId], onDelete: Cascade)\n\n  applications            Application[]\n  applicationHistories    ApplicationHistory[] @relation(\"HistoryChangedBy\")\n  userClientRoles         UserClientRole[]     @relation(\"UserRoles\")\n  assignedUserClientRoles UserClientRole[]     @relation(\"RoleAssignedBy\")\n\n  @@index([clientId])\n  @@index([email])\n  @@index([username])\n  @@map(\"users\")\n}\n\n// ========================================\n// Application Management\n// ========================================\n\nmodel Application {\n  applicationId   String          @id @default(uuid()) @map(\"application_id\") @db.Uuid\n  userId          String          @map(\"user_id\") @db.Uuid\n  type            ApplicationType @map(\"type\")\n  description     String          @map(\"description\") @db.Text\n  applicationDate DateTime        @default(now()) @map(\"application_date\")\n  updatedAt       DateTime        @updatedAt @map(\"updated_at\")\n\n  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)\n\n  histories ApplicationHistory[]\n\n  @@index([userId])\n  @@index([type])\n  @@index([applicationDate])\n  @@map(\"applications\")\n}\n\nmodel ApplicationHistory {\n  historyId       String            @id @default(uuid()) @map(\"history_id\") @db.Uuid\n  applicationId   String            @map(\"application_id\") @db.Uuid\n  changedByUserId String?           @map(\"changed_by_user_id\") @db.Uuid\n  status          ApplicationStatus @map(\"status\")\n  comment         String?           @map(\"comment\") @db.Text\n  changeDate      DateTime          @default(now()) @map(\"change_date\")\n\n  application   Application @relation(fields: [applicationId], references: [applicationId], onDelete: Cascade)\n  changedByUser User?       @relation(\"HistoryChangedBy\", fields: [changedByUserId], references: [userId], onDelete: SetNull)\n\n  @@index([applicationId])\n  @@index([changedByUserId])\n  @@index([status])\n  @@index([changeDate])\n  @@map(\"application_histories\")\n}\n\n// ========================================\n// Role-Based Access Control (RBAC)\n// ========================================\n\nmodel Role {\n  roleId      String   @id @default(uuid()) @map(\"role_id\") @db.Uuid\n  name        String   @unique @map(\"name\") @db.VarChar(100)\n  description String?  @map(\"description\") @db.Text\n  createdAt   DateTime @default(now()) @map(\"created_at\")\n  updatedAt   DateTime @updatedAt @map(\"updated_at\")\n\n  rolePermissions RolePermission[]\n  userClientRoles UserClientRole[]\n\n  @@index([name])\n  @@map(\"roles\")\n}\n\nmodel Permission {\n  permissionId String   @id @default(uuid()) @map(\"permission_id\") @db.Uuid\n  name         String   @unique @map(\"name\") @db.VarChar(100)\n  description  String?  @map(\"description\") @db.Text\n  createdAt    DateTime @default(now()) @map(\"created_at\")\n  updatedAt    DateTime @updatedAt @map(\"updated_at\")\n\n  rolePermissions RolePermission[]\n\n  @@index([name])\n  @@map(\"permissions\")\n}\n\nmodel RolePermission {\n  roleId       String @map(\"role_id\") @db.Uuid\n  permissionId String @map(\"permission_id\") @db.Uuid\n\n  role       Role       @relation(fields: [roleId], references: [roleId], onDelete: Cascade)\n  permission Permission @relation(fields: [permissionId], references: [permissionId], onDelete: Cascade)\n\n  @@id([roleId, permissionId])\n  @@index([permissionId])\n  @@map(\"role_permissions\")\n}\n\nmodel UserClientRole {\n  userClientRoleId String   @id @default(uuid()) @map(\"user_client_role_id\") @db.Uuid\n  userId           String   @map(\"user_id\") @db.Uuid\n  clientId         String   @map(\"client_id\") @db.Uuid\n  roleId           String   @map(\"role_id\") @db.Uuid\n  assignedByUserId String?  @map(\"assigned_by_user_id\") @db.Uuid\n  assignedAt       DateTime @default(now()) @map(\"assigned_at\")\n\n  user           User   @relation(\"UserRoles\", fields: [userId], references: [userId], onDelete: Cascade)\n  client         Client @relation(fields: [clientId], references: [clientId], onDelete: Cascade)\n  role           Role   @relation(fields: [roleId], references: [roleId], onDelete: Cascade)\n  assignedByUser User?  @relation(\"RoleAssignedBy\", fields: [assignedByUserId], references: [userId], onDelete: SetNull)\n\n  @@unique([userId, clientId, roleId])\n  @@index([userId])\n  @@index([clientId])\n  @@index([roleId])\n  @@index([assignedByUserId])\n  @@map(\"user_client_roles\")\n}\n",
  "inlineSchemaHash": "8a3a78e0314016fa1c7af6997bebe127e390a932446bf3b9d92f5d5d08ec24b1",
  "copyEngine": true,
  "runtimeDataModel": {
    "models": {},
    "enums": {},
    "types": {}
  },
  "dirname": ""
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"Tasks\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"taskId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"task_id\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"content\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TaskStatus\",\"dbName\":\"status\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"completed_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"}],\"dbName\":\"tasks\"},\"Organization\":{\"fields\":[{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"organization_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"name\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"description\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"clients\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToOrganization\"}],\"dbName\":\"organizations\"},\"Client\":{\"fields\":[{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"client_id\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"organization_id\"},{\"name\":\"parentClientId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"parent_client_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"name\"},{\"name\":\"contactPerson\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"contact_person\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"email\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"ClientToOrganization\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientHierarchy\"},{\"name\":\"children\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientHierarchy\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClientToUser\"},{\"name\":\"userClientRoles\",\"kind\":\"object\",\"type\":\"UserClientRole\",\"relationName\":\"ClientToUserClientRole\"}],\"dbName\":\"clients\"},\"User\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"client_id\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"username\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"email\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"password_hash\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToUser\"},{\"name\":\"applications\",\"kind\":\"object\",\"type\":\"Application\",\"relationName\":\"ApplicationToUser\"},{\"name\":\"applicationHistories\",\"kind\":\"object\",\"type\":\"ApplicationHistory\",\"relationName\":\"HistoryChangedBy\"},{\"name\":\"userClientRoles\",\"kind\":\"object\",\"type\":\"UserClientRole\",\"relationName\":\"UserRoles\"},{\"name\":\"assignedUserClientRoles\",\"kind\":\"object\",\"type\":\"UserClientRole\",\"relationName\":\"RoleAssignedBy\"}],\"dbName\":\"users\"},\"Application\":{\"fields\":[{\"name\":\"applicationId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"application_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ApplicationType\",\"dbName\":\"type\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"description\"},{\"name\":\"applicationDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"application_date\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ApplicationToUser\"},{\"name\":\"histories\",\"kind\":\"object\",\"type\":\"ApplicationHistory\",\"relationName\":\"ApplicationToApplicationHistory\"}],\"dbName\":\"applications\"},\"ApplicationHistory\":{\"fields\":[{\"name\":\"historyId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"history_id\"},{\"name\":\"applicationId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"application_id\"},{\"name\":\"changedByUserId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"changed_by_user_id\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ApplicationStatus\",\"dbName\":\"status\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"comment\"},{\"name\":\"changeDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"change_date\"},{\"name\":\"application\",\"kind\":\"object\",\"type\":\"Application\",\"relationName\":\"ApplicationToApplicationHistory\"},{\"name\":\"changedByUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"HistoryChangedBy\"}],\"dbName\":\"application_histories\"},\"Role\":{\"fields\":[{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"role_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"name\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"description\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"rolePermissions\",\"kind\":\"object\",\"type\":\"RolePermission\",\"relationName\":\"RoleToRolePermission\"},{\"name\":\"userClientRoles\",\"kind\":\"object\",\"type\":\"UserClientRole\",\"relationName\":\"RoleToUserClientRole\"}],\"dbName\":\"roles\"},\"Permission\":{\"fields\":[{\"name\":\"permissionId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"permission_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"name\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"description\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"rolePermissions\",\"kind\":\"object\",\"type\":\"RolePermission\",\"relationName\":\"PermissionToRolePermission\"}],\"dbName\":\"permissions\"},\"RolePermission\":{\"fields\":[{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"role_id\"},{\"name\":\"permissionId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"permission_id\"},{\"name\":\"role\",\"kind\":\"object\",\"type\":\"Role\",\"relationName\":\"RoleToRolePermission\"},{\"name\":\"permission\",\"kind\":\"object\",\"type\":\"Permission\",\"relationName\":\"PermissionToRolePermission\"}],\"dbName\":\"role_permissions\"},\"UserClientRole\":{\"fields\":[{\"name\":\"userClientRoleId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_client_role_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"client_id\"},{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"role_id\"},{\"name\":\"assignedByUserId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"assigned_by_user_id\"},{\"name\":\"assignedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"assigned_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserRoles\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToUserClientRole\"},{\"name\":\"role\",\"kind\":\"object\",\"type\":\"Role\",\"relationName\":\"RoleToUserClientRole\"},{\"name\":\"assignedByUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RoleAssignedBy\"}],\"dbName\":\"user_client_roles\"}},\"enums\":{},\"types\":{}}")
config.engineWasm = undefined

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const wasmArray = Buffer.from(wasmBase64, 'base64')
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.js"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.js")
    return await decodeBase64AsWasm(wasm)
  }
}




export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never

export interface PrismaClientConstructor {
    /**
   * ## Prisma Client
   * 
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tasks
   * const tasks = await prisma.tasks.findMany()
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tasks
 * const tasks = await prisma.tasks.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<R>


  $extends: runtime.Types.Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.tasks`: Exposes CRUD operations for the **Tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.tasks.findMany()
    * ```
    */
  get tasks(): Prisma.TasksDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.applicationHistory`: Exposes CRUD operations for the **ApplicationHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicationHistories
    * const applicationHistories = await prisma.applicationHistory.findMany()
    * ```
    */
  get applicationHistory(): Prisma.ApplicationHistoryDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.userClientRole`: Exposes CRUD operations for the **UserClientRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserClientRoles
    * const userClientRoles = await prisma.userClientRole.findMany()
    * ```
    */
  get userClientRole(): Prisma.UserClientRoleDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
